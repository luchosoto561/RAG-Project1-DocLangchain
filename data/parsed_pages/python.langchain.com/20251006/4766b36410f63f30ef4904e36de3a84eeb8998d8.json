{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/document_loader_directory/",
    "title": "How to load documents from a directory | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:55:20.840548"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to load documents from a directory | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "LangChain's DirectoryLoader implements functionality for reading files from disk into LangChain Document objects. Here we demonstrate:"
        },
        {
          "type": "list",
          "ordered": false,
          "items": [
            "How to load from a filesystem, including use of wildcard patterns;",
            "How to use multithreading for file I/O;",
            "How to use custom loader classes to parse specific file types (e.g., code);",
            "How to handle errors, such as those due to decoding."
          ]
        },
        {
          "type": "code",
          "code": "from langchain_community.document_loaders import DirectoryLoader"
        },
        {
          "type": "paragraph",
          "text": "DirectoryLoader accepts a loader_cls kwarg, which defaults to UnstructuredLoader. Unstructured supports parsing for a number of formats, such as PDF and HTML. Here we use it to read in a markdown (.md) file."
        },
        {
          "type": "paragraph",
          "text": "We can use the glob parameter to control which files to load. Note that here it doesn't load the .rst file or the .html files."
        },
        {
          "type": "code",
          "code": "loader = DirectoryLoader(\"../\", glob=\"**/*.md\")docs = loader.load()len(docs)"
        },
        {
          "type": "code",
          "code": "20"
        },
        {
          "type": "code",
          "code": "print(docs[0].page_content[:100])"
        },
        {
          "type": "code",
          "code": "SecurityLangChain has a large ecosystem of integrations with various external resources like local"
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Show a progress bar‚Äã",
          "anchor": "show-a-progress-bar",
          "blocks": [
            {
              "type": "paragraph",
              "text": "By default a progress bar will not be shown. To show a progress bar, install the tqdm library (e.g. pip install tqdm), and set the show_progress parameter to True."
            },
            {
              "type": "code",
              "code": "loader = DirectoryLoader(\"../\", glob=\"**/*.md\", show_progress=True)docs = loader.load()"
            },
            {
              "type": "code",
              "code": "100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\u0000\u0000‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 20/20 [00:00<00:00, 54.56it/s]"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Use multithreading‚Äã",
          "anchor": "use-multithreading",
          "blocks": [
            {
              "type": "paragraph",
              "text": "By default the loading happens in one thread. In order to utilize several threads set the use_multithreading flag to true."
            },
            {
              "type": "code",
              "code": "loader = DirectoryLoader(\"../\", glob=\"**/*.md\", use_multithreading=True)docs = loader.load()"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Change loader class‚Äã",
          "anchor": "change-loader-class",
          "blocks": [
            {
              "type": "paragraph",
              "text": "By default this uses the UnstructuredLoader class. To customize the loader, specify the loader class in the loader_cls kwarg. Below we show an example using TextLoader:"
            },
            {
              "type": "code",
              "code": "from langchain_community.document_loaders import TextLoaderloader = DirectoryLoader(\"../\", glob=\"**/*.md\", loader_cls=TextLoader)docs = loader.load()"
            },
            {
              "type": "code",
              "code": "print(docs[0].page_content[:100])"
            },
            {
              "type": "code",
              "code": "# SecurityLangChain has a large ecosystem of integrations with various external resources like loc"
            },
            {
              "type": "paragraph",
              "text": "Notice that while the UnstructuredLoader parses Markdown headers, TextLoader does not."
            },
            {
              "type": "paragraph",
              "text": "If you need to load Python source code files, use the PythonLoader:"
            },
            {
              "type": "code",
              "code": "from langchain_community.document_loaders import PythonLoaderloader = DirectoryLoader(\"../../../../../\", glob=\"**/*.py\", loader_cls=PythonLoader)"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Auto-detect file encodings with TextLoader‚Äã",
          "anchor": "auto-detect-file-encodings-with-textloader",
          "blocks": [
            {
              "type": "paragraph",
              "text": "DirectoryLoader can help manage errors due to variations in file encodings. Below we will attempt to load in a collection of files, one of which includes non-UTF8 encodings."
            },
            {
              "type": "code",
              "code": "path = \"../../../libs/langchain/tests/unit_tests/examples/\"loader = DirectoryLoader(path, glob=\"**/*.txt\", loader_cls=TextLoader)"
            }
          ],
          "children": [
            {
              "level": 3,
              "heading_text": "A. Default Behavior‚Äã",
              "anchor": "a-default-behavior",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "By default we raise an error:"
                },
                {
                  "type": "code",
                  "code": "loader.load()"
                },
                {
                  "type": "code",
                  "code": "Error loading file ../../../../libs/langchain/tests/unit_tests/examples/example-non-utf8.txt"
                },
                {
                  "type": "code",
                  "code": "---------------------------------------------------------------------------``````outputUnicodeDecodeError                        Traceback (most recent call last)``````outputFile ~/repos/langchain/libs/community/langchain_community/document_loaders/text.py:43, in TextLoader.lazy_load(self)     42     with open(self.file_path, encoding=self.encoding) as f:---> 43         text = f.read()     44 except UnicodeDecodeError as e:``````outputFile ~/.pyenv/versions/3.10.4/lib/python3.10/codecs.py:322, in BufferedIncrementalDecoder.decode(self, input, final)    321 data = self.buffer + input--> 322 (result, consumed) = self._buffer_decode(data, self.errors, final)    323 # keep undecoded input until the next call``````outputUnicodeDecodeError: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte``````outputThe above exception was the direct cause of the following exception:``````outputRuntimeError                              Traceback (most recent call last)``````outputCell In[10], line 1----> 1 loader.load()``````outputFile ~/repos/langchain/libs/community/langchain_community/document_loaders/directory.py:117, in DirectoryLoader.load(self)    115 def load(self) -> List[Document]:    116     \"\"\"Load documents.\"\"\"--> 117     return list(self.lazy_load())``````outputFile ~/repos/langchain/libs/community/langchain_community/document_loaders/directory.py:182, in DirectoryLoader.lazy_load(self)    180 else:    181     for i in items:--> 182         yield from self._lazy_load_file(i, p, pbar)    184 if pbar:    185     pbar.close()``````outputFile ~/repos/langchain/libs/community/langchain_community/document_loaders/directory.py:220, in DirectoryLoader._lazy_load_file(self, item, path, pbar)    218     else:    219         logger.error(f\"Error loading file {str(item)}\")--> 220         raise e    221 finally:    222     if pbar:``````outputFile ~/repos/langchain/libs/community/langchain_community/document_loaders/directory.py:210, in DirectoryLoader._lazy_load_file(self, item, path, pbar)    208 loader = self.loader_cls(str(item), **self.loader_kwargs)    209 try:--> 210     for subdoc in loader.lazy_load():    211         yield subdoc    212 except NotImplementedError:``````outputFile ~/repos/langchain/libs/community/langchain_community/document_loaders/text.py:56, in TextLoader.lazy_load(self)     54                 continue     55     else:---> 56         raise RuntimeError(f\"Error loading {self.file_path}\") from e     57 except Exception as e:     58     raise RuntimeError(f\"Error loading {self.file_path}\") from e``````outputRuntimeError: Error loading ../../../../libs/langchain/tests/unit_tests/examples/example-non-utf8.txt"
                },
                {
                  "type": "paragraph",
                  "text": "The file example-non-utf8.txt uses a different encoding, so the load() function fails with a helpful message indicating which file failed decoding."
                },
                {
                  "type": "paragraph",
                  "text": "With the default behavior of TextLoader any failure to load any of the documents will fail the whole loading process and no documents are loaded."
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "B. Silent fail‚Äã",
              "anchor": "b-silent-fail",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "We can pass the parameter silent_errors to the DirectoryLoader to skip the files which could not be loaded and continue the load process."
                },
                {
                  "type": "code",
                  "code": "loader = DirectoryLoader(    path, glob=\"**/*.txt\", loader_cls=TextLoader, silent_errors=True)docs = loader.load()"
                },
                {
                  "type": "code",
                  "code": "Error loading file ../../../../libs/langchain/tests/unit_tests/examples/example-non-utf8.txt: Error loading ../../../../libs/langchain/tests/unit_tests/examples/example-non-utf8.txt"
                },
                {
                  "type": "code",
                  "code": "doc_sources = [doc.metadata[\"source\"] for doc in docs]doc_sources"
                },
                {
                  "type": "code",
                  "code": "['../../../../libs/langchain/tests/unit_tests/examples/example-utf8.txt']"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "C. Auto detect encodings‚Äã",
              "anchor": "c-auto-detect-encodings",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "We can also ask TextLoader to auto detect the file encoding before failing, by passing the autodetect_encoding to the loader class."
                },
                {
                  "type": "code",
                  "code": "text_loader_kwargs = {\"autodetect_encoding\": True}loader = DirectoryLoader(    path, glob=\"**/*.txt\", loader_cls=TextLoader, loader_kwargs=text_loader_kwargs)docs = loader.load()"
                },
                {
                  "type": "code",
                  "code": "doc_sources = [doc.metadata[\"source\"] for doc in docs]doc_sources"
                },
                {
                  "type": "code",
                  "code": "['../../../../libs/langchain/tests/unit_tests/examples/example-utf8.txt', '../../../../libs/langchain/tests/unit_tests/examples/example-non-utf8.txt']"
                },
                {
                  "type": "list",
                  "ordered": false,
                  "items": [
                    "A. Default Behavior",
                    "B. Silent fail",
                    "C. Auto detect encodings"
                  ]
                }
              ],
              "children": []
            }
          ]
        }
      ]
    }
  ]
}
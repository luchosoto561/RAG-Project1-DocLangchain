{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/tools_few_shot/",
    "title": "How to use few-shot prompting with tool calling | 🦜️🔗 LangChain",
    "fetched_at": "2025-10-06T21:56:43.873577"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to use few-shot prompting with tool calling | 🦜️🔗 LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "For more complex tool use it's very useful to add few-shot examples to the prompt. We can do this by adding AIMessages with ToolCalls and corresponding ToolMessages to our prompt."
        },
        {
          "type": "paragraph",
          "text": "First let's define our tools and model."
        },
        {
          "type": "code",
          "code": "from langchain_core.tools import tool@tooldef add(a: int, b: int) -> int:    \"\"\"Adds a and b.\"\"\"    return a + b@tooldef multiply(a: int, b: int) -> int:    \"\"\"Multiplies a and b.\"\"\"    return a * btools = [add, multiply]"
        },
        {
          "type": "code",
          "code": "import osfrom getpass import getpassfrom langchain_openai import ChatOpenAIif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()llm = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0)llm_with_tools = llm.bind_tools(tools)"
        },
        {
          "type": "paragraph",
          "text": "Let's run our model where we can notice that even with some special instructions our model can get tripped up by order of operations."
        },
        {
          "type": "code",
          "code": "llm_with_tools.invoke(    \"Whats 119 times 8 minus 20. Don't do any math yourself, only use tools for math. Respect order of operations\").tool_calls"
        },
        {
          "type": "code",
          "code": "[{'name': 'Multiply',  'args': {'a': 119, 'b': 8},  'id': 'call_T88XN6ECucTgbXXkyDeC2CQj'}, {'name': 'Add',  'args': {'a': 952, 'b': -20},  'id': 'call_licdlmGsRqzup8rhqJSb1yZ4'}]"
        },
        {
          "type": "paragraph",
          "text": "The model shouldn't be trying to add anything yet, since it technically can't know the results of 119 * 8 yet."
        },
        {
          "type": "paragraph",
          "text": "By adding a prompt with some examples we can correct this behavior:"
        },
        {
          "type": "code",
          "code": "from langchain_core.messages import AIMessage, HumanMessage, ToolMessagefrom langchain_core.prompts import ChatPromptTemplatefrom langchain_core.runnables import RunnablePassthroughexamples = [    HumanMessage(        \"What's the product of 317253 and 128472 plus four\", name=\"example_user\"    ),    AIMessage(        \"\",        name=\"example_assistant\",        tool_calls=[            {\"name\": \"Multiply\", \"args\": {\"x\": 317253, \"y\": 128472}, \"id\": \"1\"}        ],    ),    ToolMessage(\"16505054784\", tool_call_id=\"1\"),    AIMessage(        \"\",        name=\"example_assistant\",        tool_calls=[{\"name\": \"Add\", \"args\": {\"x\": 16505054784, \"y\": 4}, \"id\": \"2\"}],    ),    ToolMessage(\"16505054788\", tool_call_id=\"2\"),    AIMessage(        \"The product of 317253 and 128472 plus four is 16505054788\",        name=\"example_assistant\",    ),]system = \"\"\"You are bad at math but are an expert at using a calculator. Use past tool usage as an example of how to correctly use the tools.\"\"\"few_shot_prompt = ChatPromptTemplate.from_messages(    [        (\"system\", system),        *examples,        (\"human\", \"{query}\"),    ])chain = {\"query\": RunnablePassthrough()} | few_shot_prompt | llm_with_toolschain.invoke(\"Whats 119 times 8 minus 20\").tool_calls"
        },
        {
          "type": "code",
          "code": "[{'name': 'Multiply',  'args': {'a': 119, 'b': 8},  'id': 'call_9MvuwQqg7dlJupJcoTWiEsDo'}]"
        },
        {
          "type": "paragraph",
          "text": "And we get the correct output this time."
        },
        {
          "type": "paragraph",
          "text": "Here's what the LangSmith trace looks like."
        }
      ],
      "children": []
    }
  ]
}
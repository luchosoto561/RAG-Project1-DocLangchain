{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/split_by_token/",
    "title": "How to split text by tokens | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:56:22.335479"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to split text by tokens | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "Language models have a token limit. You should not exceed the token limit. When you split your text into chunks it is therefore a good idea to count the number of tokens. There are many tokenizers. When you count tokens in your text you should use the same tokenizer as used in the language model."
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "tiktoken‚Äã",
          "anchor": "tiktoken",
          "blocks": [
            {
              "type": "paragraph",
              "text": "tiktoken is a fast BPE tokenizer created by OpenAI."
            },
            {
              "type": "paragraph",
              "text": "We can use tiktoken to estimate tokens used. It will probably be more accurate for the OpenAI models."
            },
            {
              "type": "list",
              "ordered": true,
              "items": [
                "How the text is split: by character passed in.",
                "How the chunk size is measured: by tiktoken tokenizer."
              ]
            },
            {
              "type": "paragraph",
              "text": "CharacterTextSplitter, RecursiveCharacterTextSplitter, and TokenTextSplitter can be used with tiktoken directly."
            },
            {
              "type": "code",
              "code": "%pip install --upgrade --quiet langchain-text-splitters tiktoken"
            },
            {
              "type": "code",
              "code": "from langchain_text_splitters import CharacterTextSplitter# This is a long document we can split up.with open(\"state_of_the_union.txt\") as f:    state_of_the_union = f.read()"
            },
            {
              "type": "paragraph",
              "text": "To split with a CharacterTextSplitter and then merge chunks with tiktoken, use its .from_tiktoken_encoder() method. Note that splits from this method can be larger than the chunk size measured by the tiktoken tokenizer."
            },
            {
              "type": "paragraph",
              "text": "The .from_tiktoken_encoder() method takes either encoding_name as an argument (e.g. cl100k_base), or the model_name (e.g. gpt-4). All additional arguments like chunk_size, chunk_overlap, and separators are used to instantiate CharacterTextSplitter:"
            },
            {
              "type": "code",
              "code": "text_splitter = CharacterTextSplitter.from_tiktoken_encoder(    encoding_name=\"cl100k_base\", chunk_size=100, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)"
            },
            {
              "type": "code",
              "code": "print(texts[0])"
            },
            {
              "type": "code",
              "code": "Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  Last year COVID-19 kept us apart. This year we are finally together again. Tonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. With a duty to one another to the American people to the Constitution."
            },
            {
              "type": "paragraph",
              "text": "To implement a hard constraint on the chunk size, we can use RecursiveCharacterTextSplitter.from_tiktoken_encoder, where each split will be recursively split if it has a larger size:"
            },
            {
              "type": "code",
              "code": "from langchain_text_splitters import RecursiveCharacterTextSplittertext_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(    model_name=\"gpt-4\",    chunk_size=100,    chunk_overlap=0,)"
            },
            {
              "type": "paragraph",
              "text": "We can also load a TokenTextSplitter splitter, which works with tiktoken directly and will ensure each split is smaller than chunk size."
            },
            {
              "type": "code",
              "code": "from langchain_text_splitters import TokenTextSplittertext_splitter = TokenTextSplitter(chunk_size=10, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)print(texts[0])"
            },
            {
              "type": "code",
              "code": "Madam Speaker, Madam Vice President, our"
            },
            {
              "type": "paragraph",
              "text": "Some written languages (e.g. Chinese and Japanese) have characters which encode to 2 or more tokens. Using the TokenTextSplitter directly can split the tokens for a character between two chunks causing malformed Unicode characters. Use RecursiveCharacterTextSplitter.from_tiktoken_encoder or CharacterTextSplitter.from_tiktoken_encoder to ensure chunks contain valid Unicode strings."
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "spaCy‚Äã",
          "anchor": "spacy",
          "blocks": [
            {
              "type": "paragraph",
              "text": "spaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython."
            },
            {
              "type": "paragraph",
              "text": "LangChain implements splitters based on the spaCy tokenizer."
            },
            {
              "type": "list",
              "ordered": true,
              "items": [
                "How the text is split: by spaCy tokenizer.",
                "How the chunk size is measured: by number of characters."
              ]
            },
            {
              "type": "code",
              "code": "%pip install --upgrade --quiet  spacy"
            },
            {
              "type": "code",
              "code": "# This is a long document we can split up.with open(\"state_of_the_union.txt\") as f:    state_of_the_union = f.read()"
            },
            {
              "type": "code",
              "code": "from langchain_text_splitters import SpacyTextSplittertext_splitter = SpacyTextSplitter(chunk_size=1000)texts = text_splitter.split_text(state_of_the_union)print(texts[0])"
            },
            {
              "type": "code",
              "code": "Madam Speaker, Madam Vice President, our First Lady and Second Gentleman.Members of Congress and the Cabinet.Justices of the Supreme Court.My fellow Americans.  Last year COVID-19 kept us apart.This year we are finally together again. Tonight, we meet as Democrats Republicans and Independents.But most importantly as Americans. With a duty to one another to the American people to the Constitution. And with an unwavering resolve that freedom will always triumph over tyranny. Six days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways.But he badly miscalculated. He thought he could roll into Ukraine and the world would roll over.Instead he met a wall of strength he never imagined. He met the Ukrainian people. From President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world."
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "SentenceTransformers‚Äã",
          "anchor": "sentencetransformers",
          "blocks": [
            {
              "type": "paragraph",
              "text": "The SentenceTransformersTokenTextSplitter is a specialized text splitter for use with the sentence-transformer models. The default behaviour is to split the text into chunks that fit the token window of the sentence transformer model that you would like to use."
            },
            {
              "type": "paragraph",
              "text": "To split text and constrain token counts according to the sentence-transformers tokenizer, instantiate a SentenceTransformersTokenTextSplitter. You can optionally specify:"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "chunk_overlap: integer count of token overlap;",
                "model_name: sentence-transformer model name, defaulting to \"sentence-transformers/all-mpnet-base-v2\";",
                "tokens_per_chunk: desired token count per chunk."
              ]
            },
            {
              "type": "code",
              "code": "from langchain_text_splitters import SentenceTransformersTokenTextSplittersplitter = SentenceTransformersTokenTextSplitter(chunk_overlap=0)text = \"Lorem \"count_start_and_stop_tokens = 2text_token_count = splitter.count_tokens(text=text) - count_start_and_stop_tokensprint(text_token_count)"
            },
            {
              "type": "code",
              "code": "2"
            },
            {
              "type": "code",
              "code": "token_multiplier = splitter.maximum_tokens_per_chunk // text_token_count + 1# `text_to_split` does not fit in a single chunktext_to_split = text * token_multiplierprint(f\"tokens in text to split: {splitter.count_tokens(text=text_to_split)}\")"
            },
            {
              "type": "code",
              "code": "tokens in text to split: 514"
            },
            {
              "type": "code",
              "code": "text_chunks = splitter.split_text(text=text_to_split)print(text_chunks[1])"
            },
            {
              "type": "code",
              "code": "lorem"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "NLTK‚Äã",
          "anchor": "nltk",
          "blocks": [
            {
              "type": "paragraph",
              "text": "The Natural Language Toolkit, or more commonly NLTK, is a suite of libraries and programs for symbolic and statistical natural language processing (NLP) for English written in the Python programming language."
            },
            {
              "type": "paragraph",
              "text": "Rather than just splitting on \"\\n\\n\", we can use NLTK to split based on NLTK tokenizers."
            },
            {
              "type": "list",
              "ordered": true,
              "items": [
                "How the text is split: by NLTK tokenizer.",
                "How the chunk size is measured: by number of characters."
              ]
            },
            {
              "type": "code",
              "code": "# pip install nltk"
            },
            {
              "type": "code",
              "code": "# This is a long document we can split up.with open(\"state_of_the_union.txt\") as f:    state_of_the_union = f.read()"
            },
            {
              "type": "code",
              "code": "from langchain_text_splitters import NLTKTextSplittertext_splitter = NLTKTextSplitter(chunk_size=1000)"
            },
            {
              "type": "code",
              "code": "texts = text_splitter.split_text(state_of_the_union)print(texts[0])"
            },
            {
              "type": "code",
              "code": "Madam Speaker, Madam Vice President, our First Lady and Second Gentleman.Members of Congress and the Cabinet.Justices of the Supreme Court.My fellow Americans.Last year COVID-19 kept us apart.This year we are finally together again.Tonight, we meet as Democrats Republicans and Independents.But most importantly as Americans.With a duty to one another to the American people to the Constitution.And with an unwavering resolve that freedom will always triumph over tyranny.Six days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways.But he badly miscalculated.He thought he could roll into Ukraine and the world would roll over.Instead he met a wall of strength he never imagined.He met the Ukrainian people.From President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.Groups of citizens blocking tanks with their bodies."
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "KoNLPY‚Äã",
          "anchor": "konlpy",
          "blocks": [
            {
              "type": "paragraph",
              "text": "KoNLPy: Korean NLP in Python is is a Python package for natural language processing (NLP) of the Korean language."
            },
            {
              "type": "paragraph",
              "text": "Token splitting involves the segmentation of text into smaller, more manageable units called tokens. These tokens are often words, phrases, symbols, or other meaningful elements crucial for further processing and analysis. In languages like English, token splitting typically involves separating words by spaces and punctuation marks. The effectiveness of token splitting largely depends on the tokenizer's understanding of the language structure, ensuring the generation of meaningful tokens. Since tokenizers designed for the English language are not equipped to understand the unique semantic structures of other languages, such as Korean, they cannot be effectively used for Korean language processing."
            }
          ],
          "children": [
            {
              "level": 3,
              "heading_text": "Token splitting for Korean with KoNLPy's Kkma Analyzer‚Äã",
              "anchor": "token-splitting-for-korean-with-konlpys-kkma-analyzer",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "In case of Korean text, KoNLPY includes at morphological analyzer called Kkma (Korean Knowledge Morpheme Analyzer). Kkma provides detailed morphological analysis of Korean text. It breaks down sentences into words and words into their respective morphemes, identifying parts of speech for each token. It can segment a block of text into individual sentences, which is particularly useful for processing long texts."
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "Usage Considerations‚Äã",
              "anchor": "usage-considerations",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "While Kkma is renowned for its detailed analysis, it is important to note that this precision may impact processing speed. Thus, Kkma is best suited for applications where analytical depth is prioritized over rapid text processing."
                },
                {
                  "type": "code",
                  "code": "# pip install konlpy"
                },
                {
                  "type": "code",
                  "code": "# This is a long Korean document that we want to split up into its component sentences.with open(\"./your_korean_doc.txt\") as f:    korean_document = f.read()"
                },
                {
                  "type": "code",
                  "code": "from langchain_text_splitters import KonlpyTextSplittertext_splitter = KonlpyTextSplitter()"
                },
                {
                  "type": "code",
                  "code": "texts = text_splitter.split_text(korean_document)# The sentences are split with \"\\n\\n\" characters.print(texts[0])"
                },
                {
                  "type": "code",
                  "code": "Ï∂òÌñ•Ï†Ñ ÏòõÎÇ†Ïóê ÎÇ®ÏõêÏóê Ïù¥ ÎèÑÎ†πÏù¥ÎùºÎäî Î≤ºÏä¨ÏïÑÏπò ÏïÑÎì§Ïù¥ ÏûàÏóàÎã§.Í∑∏Ïùò Ïô∏Î™®Îäî ÎπõÎÇòÎäî Îã¨Ï≤òÎüº ÏûòÏÉùÍ≤ºÍ≥†, Í∑∏Ïùò ÌïôÏãùÍ≥º Í∏∞ÏòàÎäî ÎÇ®Î≥¥Îã§ Îõ∞Ïñ¥ÎÇ¨Îã§.ÌïúÌé∏, Ïù¥ ÎßàÏùÑÏóêÎäî Ï∂òÌñ•Ïù¥ÎùºÎäî Ï†àÏÑ∏ Í∞ÄÏù∏Ïù¥ ÏÇ¥Í≥† ÏûàÏóàÎã§.Ï∂ò Ìñ•Ïùò ÏïÑÎ¶ÑÎã§ÏõÄÏùÄ ÍΩÉÍ≥º Í∞ôÏïÑ ÎßàÏùÑ ÏÇ¨ÎûåÎì§ Î°úÎ∂ÄÌÑ∞ ÎßéÏùÄ ÏÇ¨ÎûëÏùÑ Î∞õÏïòÎã§.Ïñ¥Îäê Î¥ÑÎÇ†, ÎèÑÎ†πÏùÄ ÏπúÍµ¨Îì§Í≥º ÎÜÄÎü¨ ÎÇòÍ∞îÎã§Í∞Ä Ï∂ò Ìñ•ÏùÑ Îßå ÎÇò Ï≤´ ÎààÏóê Î∞òÌïòÍ≥† ÎßêÏïòÎã§.Îëê ÏÇ¨ÎûåÏùÄ ÏÑúÎ°ú ÏÇ¨ÎûëÌïòÍ≤å ÎêòÏóàÍ≥†, Ïù¥ÎÇ¥ ÎπÑÎ∞ÄÏä§Îü¨Ïö¥ ÏÇ¨ÎûëÏùò ÎßπÏÑ∏Î•º ÎÇòÎàÑÏóàÎã§.ÌïòÏßÄÎßå Ï¢ãÏùÄ ÎÇ†Îì§ÏùÄ Ïò§ÎûòÍ∞ÄÏßÄ ÏïäÏïòÎã§.ÎèÑÎ†πÏùò ÏïÑÎ≤ÑÏßÄÍ∞Ä Îã§Î•∏ Í≥≥ÏúºÎ°ú Ï†ÑÍ∑ºÏùÑ Í∞ÄÍ≤å ÎêòÏñ¥ ÎèÑÎ†πÎèÑ Îñ†ÎÇò ÏïºÎßå ÌñàÎã§.Ïù¥Î≥ÑÏùò ÏïÑÌîî ÏÜçÏóêÏÑúÎèÑ, Îëê ÏÇ¨ÎûåÏùÄ Ïû¨ÌöåÎ•º Í∏∞ÏïΩÌïòÎ©∞ ÏÑúÎ°úÎ•º ÎØøÍ≥† Í∏∞Îã§Î¶¨Í∏∞Î°ú ÌñàÎã§.Í∑∏Îü¨ÎÇò ÏÉàÎ°ú Î∂ÄÏûÑÌïú Í¥ÄÏïÑÏùò ÏÇ¨ÎòêÍ∞Ä Ï∂ò Ìñ•Ïùò ÏïÑÎ¶ÑÎã§ÏõÄÏóê ÏöïÏã¨ÏùÑ ÎÇ¥ Ïñ¥ Í∑∏ÎÖÄÏóêÍ≤å Í∞ïÏöîÎ•º ÏãúÏûëÌñàÎã§.Ï∂ò Ìñ• ÏùÄ ÎèÑÎ†πÏóê ÎåÄÌïú ÏûêÏã†Ïùò ÏÇ¨ÎûëÏùÑ ÏßÄÌÇ§Í∏∞ ÏúÑÌï¥, ÏÇ¨ÎòêÏùò ÏöîÍµ¨Î•º Îã®Ìò∏Ìûà Í±∞Ï†àÌñàÎã§.Ïù¥Ïóê Î∂ÑÎÖ∏Ìïú ÏÇ¨ÎòêÎäî Ï∂ò Ìñ•ÏùÑ Í∞êÏò•Ïóê Í∞ÄÎëêÍ≥† ÌòπÎèÖÌïú ÌòïÎ≤åÏùÑ ÎÇ¥Î†∏Îã§.Ïù¥ÏïºÍ∏∞Îäî Ïù¥ ÎèÑÎ†πÏù¥ Í≥†ÏúÑ Í¥ÄÏßÅÏóê Ïò§Î•∏ ÌõÑ, Ï∂ò Ìñ•ÏùÑ Íµ¨Ìï¥ ÎÇ¥Îäî Í≤ÉÏúºÎ°ú ÎÅùÎÇúÎã§.Îëê ÏÇ¨ÎûåÏùÄ Ïò§Îûú ÏãúÎ†® ÎÅùÏóê Îã§Ïãú ÎßåÎÇòÍ≤å ÎêòÍ≥†, Í∑∏Îì§Ïùò ÏÇ¨ÎûëÏùÄ Ïò® ÏÑ∏ÏÉÅÏóê Ï†ÑÌï¥ ÏßÄÎ©∞ ÌõÑÏÑ∏ÏóêÍπåÏßÄ Ïù¥Ïñ¥ÏßÑÎã§.- Ï∂òÌñ•Ï†Ñ (The Tale of Chunhyang)"
                }
              ],
              "children": []
            }
          ]
        },
        {
          "level": 2,
          "heading_text": "Hugging Face tokenizer‚Äã",
          "anchor": "hugging-face-tokenizer",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Hugging Face has many tokenizers."
            },
            {
              "type": "paragraph",
              "text": "We use Hugging Face tokenizer, the GPT2TokenizerFast to count the text length in tokens."
            },
            {
              "type": "list",
              "ordered": true,
              "items": [
                "How the text is split: by character passed in.",
                "How the chunk size is measured: by number of tokens calculated by the Hugging Face tokenizer."
              ]
            },
            {
              "type": "code",
              "code": "from transformers import GPT2TokenizerFasttokenizer = GPT2TokenizerFast.from_pretrained(\"gpt2\")"
            },
            {
              "type": "code",
              "code": "# This is a long document we can split up.with open(\"state_of_the_union.txt\") as f:    state_of_the_union = f.read()from langchain_text_splitters import CharacterTextSplitter"
            },
            {
              "type": "code",
              "code": "text_splitter = CharacterTextSplitter.from_huggingface_tokenizer(    tokenizer, chunk_size=100, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)"
            },
            {
              "type": "code",
              "code": "print(texts[0])"
            },
            {
              "type": "code",
              "code": "Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  Last year COVID-19 kept us apart. This year we are finally together again. Tonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. With a duty to one another to the American people to the Constitution."
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Token splitting for Korean with KoNLPy's Kkma Analyzer",
                "Usage Considerations"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/serialization/",
    "title": "How to save and load LangChain objects | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:56:21.097586"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to save and load LangChain objects | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "LangChain classes implement standard methods for serialization. Serializing LangChain objects using these methods confer some advantages:"
        },
        {
          "type": "list",
          "ordered": false,
          "items": [
            "Secrets, such as API keys, are separated from other parameters and can be loaded back to the object on de-serialization;",
            "De-serialization is kept compatible across package versions, so objects that were serialized with one version of LangChain can be properly de-serialized with another."
          ]
        },
        {
          "type": "paragraph",
          "text": "To save and load LangChain objects using this system, use the dumpd, dumps, load, and loads functions in the load module of langchain-core. These functions support JSON and JSON-serializable objects."
        },
        {
          "type": "paragraph",
          "text": "All LangChain objects that inherit from Serializable are JSON-serializable. Examples include messages, document objects (e.g., as returned from retrievers), and most Runnables, such as chat models, retrievers, and chains implemented with the LangChain Expression Language."
        },
        {
          "type": "paragraph",
          "text": "Below we walk through an example with a simple LLM chain."
        },
        {
          "type": "paragraph",
          "text": "De-serialization using load and loads can instantiate any serializable LangChain object. Only use this feature with trusted inputs!"
        },
        {
          "type": "paragraph",
          "text": "De-serialization is a beta feature and is subject to change."
        },
        {
          "type": "code",
          "code": "from langchain_core.load import dumpd, dumps, load, loadsfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_openai import ChatOpenAIprompt = ChatPromptTemplate.from_messages(    [        (\"system\", \"Translate the following into {language}:\"),        (\"user\", \"{text}\"),    ],)llm = ChatOpenAI(model=\"gpt-4o-mini\", api_key=\"llm-api-key\")chain = prompt | llm"
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Saving objects‚Äã",
          "anchor": "saving-objects",
          "blocks": [],
          "children": [
            {
              "level": 3,
              "heading_text": "To json‚Äã",
              "anchor": "to-json",
              "blocks": [
                {
                  "type": "code",
                  "code": "string_representation = dumps(chain, pretty=True)print(string_representation[:500])"
                },
                {
                  "type": "code",
                  "code": "{  \"lc\": 1,  \"type\": \"constructor\",  \"id\": [    \"langchain\",    \"schema\",    \"runnable\",    \"RunnableSequence\"  ],  \"kwargs\": {    \"first\": {      \"lc\": 1,      \"type\": \"constructor\",      \"id\": [        \"langchain\",        \"prompts\",        \"chat\",        \"ChatPromptTemplate\"      ],      \"kwargs\": {        \"input_variables\": [          \"language\",          \"text\"        ],        \"messages\": [          {            \"lc\": 1,            \"type\": \"constructor\","
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "To a json-serializable Python dict‚Äã",
              "anchor": "to-a-json-serializable-python-dict",
              "blocks": [
                {
                  "type": "code",
                  "code": "dict_representation = dumpd(chain)print(type(dict_representation))"
                },
                {
                  "type": "code",
                  "code": "<class 'dict'>"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "To disk‚Äã",
              "anchor": "to-disk",
              "blocks": [
                {
                  "type": "code",
                  "code": "import jsonwith open(\"/tmp/chain.json\", \"w\") as fp:    json.dump(string_representation, fp)"
                },
                {
                  "type": "paragraph",
                  "text": "Note that the API key is withheld from the serialized representations. Parameters that are considered secret are specified by the .lc_secrets attribute of the LangChain object:"
                },
                {
                  "type": "code",
                  "code": "chain.last.lc_secrets"
                },
                {
                  "type": "code",
                  "code": "{'openai_api_key': 'OPENAI_API_KEY'}"
                }
              ],
              "children": []
            }
          ]
        },
        {
          "level": 2,
          "heading_text": "Loading objects‚Äã",
          "anchor": "loading-objects",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Specifying secrets_map in load and loads will load the corresponding secrets onto the de-serialized LangChain object."
            }
          ],
          "children": [
            {
              "level": 3,
              "heading_text": "From string‚Äã",
              "anchor": "from-string",
              "blocks": [
                {
                  "type": "code",
                  "code": "chain = loads(string_representation, secrets_map={\"OPENAI_API_KEY\": \"llm-api-key\"})"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "From dict‚Äã",
              "anchor": "from-dict",
              "blocks": [
                {
                  "type": "code",
                  "code": "chain = load(dict_representation, secrets_map={\"OPENAI_API_KEY\": \"llm-api-key\"})"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "From disk‚Äã",
              "anchor": "from-disk",
              "blocks": [
                {
                  "type": "code",
                  "code": "with open(\"/tmp/chain.json\", \"r\") as fp:    chain = loads(json.load(fp), secrets_map={\"OPENAI_API_KEY\": \"llm-api-key\"})"
                },
                {
                  "type": "paragraph",
                  "text": "Note that we recover the API key specified at the start of the guide:"
                },
                {
                  "type": "code",
                  "code": "chain.last.openai_api_key.get_secret_value()"
                },
                {
                  "type": "code",
                  "code": "'llm-api-key'"
                },
                {
                  "type": "list",
                  "ordered": false,
                  "items": [
                    "To json",
                    "To a json-serializable Python dict",
                    "To disk"
                  ]
                },
                {
                  "type": "list",
                  "ordered": false,
                  "items": [
                    "From string",
                    "From dict",
                    "From disk"
                  ]
                }
              ],
              "children": []
            }
          ]
        }
      ]
    }
  ]
}
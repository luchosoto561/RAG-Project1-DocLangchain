{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/configure/",
    "title": "How to configure runtime chain internals | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:54:51.726137"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to configure runtime chain internals | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "This guide assumes familiarity with the following concepts:"
        },
        {
          "type": "list",
          "ordered": false,
          "items": [
            "The Runnable interface",
            "Chaining runnables",
            "Binding runtime arguments"
          ]
        },
        {
          "type": "paragraph",
          "text": "Sometimes you may want to experiment with, or even expose to the end user, multiple different ways of doing things within your chains. This can include tweaking parameters such as temperature or even swapping out one model for another. In order to make this experience as easy as possible, we have defined two methods."
        },
        {
          "type": "list",
          "ordered": false,
          "items": [
            "This is related to the .bind method on runnables, but allows you to specify parameters for a given step in a chain at runtime rather than specifying them beforehand."
          ]
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Configurable Fields‚Äã",
          "anchor": "configurable-fields",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Let's walk through an example that configures chat model fields like temperature at runtime:"
            },
            {
              "type": "code",
              "code": "%pip install --upgrade --quiet langchain langchain-openaiimport osfrom getpass import getpassif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()"
            }
          ],
          "children": [
            {
              "level": 3,
              "heading_text": "Configuring fields on a chat model‚Äã",
              "anchor": "configuring-fields-on-a-chat-model",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "If using init_chat_model to create a chat model, you can specify configurable fields in the constructor:"
                },
                {
                  "type": "code",
                  "code": "from langchain.chat_models import init_chat_modelllm = init_chat_model(    \"openai:gpt-4o-mini\",    configurable_fields=(\"temperature\",),)"
                },
                {
                  "type": "paragraph",
                  "text": "You can then set the parameter at runtime using .with_config:"
                },
                {
                  "type": "code",
                  "code": "response = llm.with_config({\"temperature\": 0}).invoke(\"Hello\")print(response.content)"
                },
                {
                  "type": "code",
                  "code": "Hello! How can I assist you today?"
                },
                {
                  "type": "paragraph",
                  "text": "In addition to invocation parameters like temperature, configuring fields this way extends to clients and other attributes."
                },
                {
                  "type": "paragraph",
                  "text": "This method is applicable when binding tools as well:"
                },
                {
                  "type": "code",
                  "code": "from langchain_core.tools import tool@tooldef get_weather(location: str):    \"\"\"Get the weather.\"\"\"    return \"It's sunny.\"llm_with_tools = llm.bind_tools([get_weather])response = llm_with_tools.with_config({\"temperature\": 0}).invoke(    \"What's the weather in SF?\")response.tool_calls"
                },
                {
                  "type": "code",
                  "code": "[{'name': 'get_weather',  'args': {'location': 'San Francisco'},  'id': 'call_B93EttzlGyYUhzbIIiMcl3bE',  'type': 'tool_call'}]"
                },
                {
                  "type": "paragraph",
                  "text": "In addition to .with_config, we can now include the parameter when passing a configuration directly. See example below, where we allow the underlying model temperature to be configurable inside of a langgraph agent:"
                },
                {
                  "type": "code",
                  "code": "! pip install --upgrade langgraph"
                },
                {
                  "type": "code",
                  "code": "from langgraph.prebuilt import create_react_agentagent = create_react_agent(llm, [get_weather])response = agent.invoke(    {\"messages\": \"What's the weather in Boston?\"},    {\"configurable\": {\"temperature\": 0}},)"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "Configuring fields on arbitrary Runnables‚Äã",
              "anchor": "configuring-fields-on-arbitrary-runnables",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "You can also use the .configurable_fields method on arbitrary Runnables, as shown below:"
                },
                {
                  "type": "code",
                  "code": "from langchain_core.prompts import PromptTemplatefrom langchain_core.runnables import ConfigurableFieldfrom langchain_openai import ChatOpenAImodel = ChatOpenAI(temperature=0).configurable_fields(    temperature=ConfigurableField(        id=\"llm_temperature\",        name=\"LLM Temperature\",        description=\"The temperature of the LLM\",    ))model.invoke(\"pick a random number\")"
                },
                {
                  "type": "code",
                  "code": "AIMessage(content='17', response_metadata={'token_usage': {'completion_tokens': 1, 'prompt_tokens': 11, 'total_tokens': 12}, 'model_name': 'gpt-3.5-turbo', 'system_fingerprint': 'fp_c2295e73ad', 'finish_reason': 'stop', 'logprobs': None}, id='run-ba26a0da-0a69-4533-ab7f-21178a73d303-0')"
                },
                {
                  "type": "paragraph",
                  "text": "Above, we defined temperature as a ConfigurableField that we can set at runtime. To do so, we use the with_config method like this:"
                },
                {
                  "type": "code",
                  "code": "model.with_config(configurable={\"llm_temperature\": 0.9}).invoke(\"pick a random number\")"
                },
                {
                  "type": "code",
                  "code": "AIMessage(content='12', response_metadata={'token_usage': {'completion_tokens': 1, 'prompt_tokens': 11, 'total_tokens': 12}, 'model_name': 'gpt-3.5-turbo', 'system_fingerprint': 'fp_c2295e73ad', 'finish_reason': 'stop', 'logprobs': None}, id='run-ba8422ad-be77-4cb1-ac45-ad0aae74e3d9-0')"
                },
                {
                  "type": "paragraph",
                  "text": "Note that the passed llm_temperature entry in the dict has the same key as the id of the ConfigurableField."
                },
                {
                  "type": "paragraph",
                  "text": "We can also do this to affect just one step that's part of a chain:"
                },
                {
                  "type": "code",
                  "code": "prompt = PromptTemplate.from_template(\"Pick a random number above {x}\")chain = prompt | modelchain.invoke({\"x\": 0})"
                },
                {
                  "type": "code",
                  "code": "AIMessage(content='27', response_metadata={'token_usage': {'completion_tokens': 1, 'prompt_tokens': 14, 'total_tokens': 15}, 'model_name': 'gpt-3.5-turbo', 'system_fingerprint': 'fp_c2295e73ad', 'finish_reason': 'stop', 'logprobs': None}, id='run-ecd4cadd-1b72-4f92-b9a0-15e08091f537-0')"
                },
                {
                  "type": "code",
                  "code": "chain.with_config(configurable={\"llm_temperature\": 0.9}).invoke({\"x\": 0})"
                },
                {
                  "type": "code",
                  "code": "AIMessage(content='35', response_metadata={'token_usage': {'completion_tokens': 1, 'prompt_tokens': 14, 'total_tokens': 15}, 'model_name': 'gpt-3.5-turbo', 'system_fingerprint': 'fp_c2295e73ad', 'finish_reason': 'stop', 'logprobs': None}, id='run-a916602b-3460-46d3-a4a8-7c926ec747c0-0')"
                }
              ],
              "children": []
            }
          ]
        },
        {
          "level": 2,
          "heading_text": "Configurable Alternatives‚Äã",
          "anchor": "configurable-alternatives",
          "blocks": [
            {
              "type": "paragraph",
              "text": "The configurable_alternatives() method allows us to swap out steps in a chain with an alternative. Below, we swap out one chat model for another:"
            },
            {
              "type": "code",
              "code": "%pip install --upgrade --quiet langchain-anthropicimport osfrom getpass import getpassif \"ANTHROPIC_API_KEY\" not in os.environ:    os.environ[\"ANTHROPIC_API_KEY\"] = getpass()"
            },
            {
              "type": "code",
              "code": "\u001b[33mWARNING: You are using pip version 22.0.4; however, version 24.0 is available.You should consider upgrading via the '/Users/jacoblee/.pyenv/versions/3.10.5/bin/python -m pip install --upgrade pip' command.\u001b[0m\u001b[33m\u001b[0mNote: you may need to restart the kernel to use updated packages."
            },
            {
              "type": "code",
              "code": "from langchain_anthropic import ChatAnthropicfrom langchain_core.prompts import PromptTemplatefrom langchain_core.runnables import ConfigurableFieldfrom langchain_openai import ChatOpenAIllm = ChatAnthropic(    model=\"claude-3-haiku-20240307\", temperature=0).configurable_alternatives(    # This gives this field an id    # When configuring the end runnable, we can then use this id to configure this field    ConfigurableField(id=\"llm\"),    # This sets a default_key.    # If we specify this key, the default LLM (ChatAnthropic initialized above) will be used    default_key=\"anthropic\",    # This adds a new option, with name `openai` that is equal to `ChatOpenAI()`    openai=ChatOpenAI(),    # This adds a new option, with name `gpt4` that is equal to `ChatOpenAI(model=\"gpt-4\")`    gpt4=ChatOpenAI(model=\"gpt-4\"),    # You can add more configuration options here)prompt = PromptTemplate.from_template(\"Tell me a joke about {topic}\")chain = prompt | llm# By default it will call Anthropicchain.invoke({\"topic\": \"bears\"})"
            },
            {
              "type": "code",
              "code": "AIMessage(content=\"Here's a bear joke for you:\\n\\nWhy don't bears wear socks? \\nBecause they have bear feet!\\n\\nHow's that? I tried to come up with a simple, silly pun-based joke about bears. Puns and wordplay are a common way to create humorous bear jokes. Let me know if you'd like to hear another one!\", response_metadata={'id': 'msg_018edUHh5fUbWdiimhrC3dZD', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'input_tokens': 13, 'output_tokens': 80}}, id='run-775bc58c-28d7-4e6b-a268-48fa6661f02f-0')"
            },
            {
              "type": "code",
              "code": "# We can use `.with_config(configurable={\"llm\": \"openai\"})` to specify an llm to usechain.with_config(configurable={\"llm\": \"openai\"}).invoke({\"topic\": \"bears\"})"
            },
            {
              "type": "code",
              "code": "AIMessage(content=\"Why don't bears like fast food?\\n\\nBecause they can't catch it!\", response_metadata={'token_usage': {'completion_tokens': 15, 'prompt_tokens': 13, 'total_tokens': 28}, 'model_name': 'gpt-3.5-turbo', 'system_fingerprint': 'fp_c2295e73ad', 'finish_reason': 'stop', 'logprobs': None}, id='run-7bdaa992-19c9-4f0d-9a0c-1f326bc992d4-0')"
            },
            {
              "type": "code",
              "code": "# If we use the `default_key` then it uses the defaultchain.with_config(configurable={\"llm\": \"anthropic\"}).invoke({\"topic\": \"bears\"})"
            },
            {
              "type": "code",
              "code": "AIMessage(content=\"Here's a bear joke for you:\\n\\nWhy don't bears wear socks? \\nBecause they have bear feet!\\n\\nHow's that? I tried to come up with a simple, silly pun-based joke about bears. Puns and wordplay are a common way to create humorous bear jokes. Let me know if you'd like to hear another one!\", response_metadata={'id': 'msg_01BZvbmnEPGBtcxRWETCHkct', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'input_tokens': 13, 'output_tokens': 80}}, id='run-59b6ee44-a1cd-41b8-a026-28ee67cdd718-0')"
            }
          ],
          "children": [
            {
              "level": 3,
              "heading_text": "With Prompts‚Äã",
              "anchor": "with-prompts",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "We can do a similar thing, but alternate between prompts"
                },
                {
                  "type": "code",
                  "code": "llm = ChatAnthropic(model=\"claude-3-haiku-20240307\", temperature=0)prompt = PromptTemplate.from_template(    \"Tell me a joke about {topic}\").configurable_alternatives(    # This gives this field an id    # When configuring the end runnable, we can then use this id to configure this field    ConfigurableField(id=\"prompt\"),    # This sets a default_key.    # If we specify this key, the default prompt (asking for a joke, as initialized above) will be used    default_key=\"joke\",    # This adds a new option, with name `poem`    poem=PromptTemplate.from_template(\"Write a short poem about {topic}\"),    # You can add more configuration options here)chain = prompt | llm# By default it will write a jokechain.invoke({\"topic\": \"bears\"})"
                },
                {
                  "type": "code",
                  "code": "AIMessage(content=\"Here's a bear joke for you:\\n\\nWhy don't bears wear socks? \\nBecause they have bear feet!\", response_metadata={'id': 'msg_01DtM1cssjNFZYgeS3gMZ49H', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'input_tokens': 13, 'output_tokens': 28}}, id='run-8199af7d-ea31-443d-b064-483693f2e0a1-0')"
                },
                {
                  "type": "code",
                  "code": "# We can configure it write a poemchain.with_config(configurable={\"prompt\": \"poem\"}).invoke({\"topic\": \"bears\"})"
                },
                {
                  "type": "code",
                  "code": "AIMessage(content=\"Here is a short poem about bears:\\n\\nMajestic bears, strong and true,\\nRoaming the forests, wild and free.\\nPowerful paws, fur soft and brown,\\nCommanding respect, nature's crown.\\n\\nForaging for berries, fishing streams,\\nProtecting their young, fierce and keen.\\nMighty bears, a sight to behold,\\nGuardians of the wilderness, untold.\\n\\nIn the wild they reign supreme,\\nEmbodying nature's grand theme.\\nBears, a symbol of strength and grace,\\nCaptivating all who see their face.\", response_metadata={'id': 'msg_01Wck3qPxrjURtutvtodaJFn', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'input_tokens': 13, 'output_tokens': 134}}, id='run-69414a1e-51d7-4bec-a307-b34b7d61025e-0')"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "With Prompts and LLMs‚Äã",
              "anchor": "with-prompts-and-llms",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "We can also have multiple things configurable! Here's an example doing that with both prompts and LLMs."
                },
                {
                  "type": "code",
                  "code": "llm = ChatAnthropic(    model=\"claude-3-haiku-20240307\", temperature=0).configurable_alternatives(    # This gives this field an id    # When configuring the end runnable, we can then use this id to configure this field    ConfigurableField(id=\"llm\"),    # This sets a default_key.    # If we specify this key, the default LLM (ChatAnthropic initialized above) will be used    default_key=\"anthropic\",    # This adds a new option, with name `openai` that is equal to `ChatOpenAI()`    openai=ChatOpenAI(),    # This adds a new option, with name `gpt4` that is equal to `ChatOpenAI(model=\"gpt-4\")`    gpt4=ChatOpenAI(model=\"gpt-4\"),    # You can add more configuration options here)prompt = PromptTemplate.from_template(    \"Tell me a joke about {topic}\").configurable_alternatives(    # This gives this field an id    # When configuring the end runnable, we can then use this id to configure this field    ConfigurableField(id=\"prompt\"),    # This sets a default_key.    # If we specify this key, the default prompt (asking for a joke, as initialized above) will be used    default_key=\"joke\",    # This adds a new option, with name `poem`    poem=PromptTemplate.from_template(\"Write a short poem about {topic}\"),    # You can add more configuration options here)chain = prompt | llm# We can configure it write a poem with OpenAIchain.with_config(configurable={\"prompt\": \"poem\", \"llm\": \"openai\"}).invoke(    {\"topic\": \"bears\"})"
                },
                {
                  "type": "code",
                  "code": "AIMessage(content=\"In the forest deep and wide,\\nBears roam with grace and pride.\\nWith fur as dark as night,\\nThey rule the land with all their might.\\n\\nIn winter's chill, they hibernate,\\nIn spring they emerge, hungry and great.\\nWith claws sharp and eyes so keen,\\nThey hunt for food, fierce and lean.\\n\\nBut beneath their tough exterior,\\nLies a gentle heart, warm and superior.\\nThey love their cubs with all their might,\\nProtecting them through day and night.\\n\\nSo let us admire these majestic creatures,\\nIn awe of their strength and features.\\nFor in the wild, they reign supreme,\\nThe mighty bears, a timeless dream.\", response_metadata={'token_usage': {'completion_tokens': 133, 'prompt_tokens': 13, 'total_tokens': 146}, 'model_name': 'gpt-3.5-turbo', 'system_fingerprint': 'fp_c2295e73ad', 'finish_reason': 'stop', 'logprobs': None}, id='run-5eec0b96-d580-49fd-ac4e-e32a0803b49b-0')"
                },
                {
                  "type": "code",
                  "code": "# We can always just configure only one if we wantchain.with_config(configurable={\"llm\": \"openai\"}).invoke({\"topic\": \"bears\"})"
                },
                {
                  "type": "code",
                  "code": "AIMessage(content=\"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\", response_metadata={'token_usage': {'completion_tokens': 13, 'prompt_tokens': 13, 'total_tokens': 26}, 'model_name': 'gpt-3.5-turbo', 'system_fingerprint': 'fp_c2295e73ad', 'finish_reason': 'stop', 'logprobs': None}, id='run-c1b14c9c-4988-49b8-9363-15bfd479973a-0')"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "Saving configurations‚Äã",
              "anchor": "saving-configurations",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "We can also easily save configured chains as their own objects"
                },
                {
                  "type": "code",
                  "code": "openai_joke = chain.with_config(configurable={\"llm\": \"openai\"})openai_joke.invoke({\"topic\": \"bears\"})"
                },
                {
                  "type": "code",
                  "code": "AIMessage(content=\"Why did the bear break up with his girlfriend? \\nBecause he couldn't bear the relationship anymore!\", response_metadata={'token_usage': {'completion_tokens': 20, 'prompt_tokens': 13, 'total_tokens': 33}, 'model_name': 'gpt-3.5-turbo', 'system_fingerprint': 'fp_c2295e73ad', 'finish_reason': 'stop', 'logprobs': None}, id='run-391ebd55-9137-458b-9a11-97acaff6a892-0')"
                }
              ],
              "children": []
            }
          ]
        },
        {
          "level": 2,
          "heading_text": "Next steps‚Äã",
          "anchor": "next-steps",
          "blocks": [
            {
              "type": "paragraph",
              "text": "You now know how to configure a chain's internal steps at runtime."
            },
            {
              "type": "paragraph",
              "text": "To learn more, see the other how-to guides on runnables in this section, including:"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Using .bind() as a simpler way to set a runnable's runtime parameters"
              ]
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Configuring fields on a chat model",
                "Configuring fields on arbitrary Runnables"
              ]
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "With Prompts",
                "With Prompts and LLMs",
                "Saving configurations"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
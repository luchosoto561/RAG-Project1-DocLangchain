{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/document_loader_markdown/",
    "title": "How to load Markdown | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:55:24.248947"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to load Markdown | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "Markdown is a lightweight markup language for creating formatted text using a plain-text editor."
        },
        {
          "type": "paragraph",
          "text": "Here we cover how to load Markdown documents into LangChain Document objects that we can use downstream."
        },
        {
          "type": "paragraph",
          "text": "We will cover:"
        },
        {
          "type": "list",
          "ordered": false,
          "items": [
            "Basic usage;",
            "Parsing of Markdown into elements such as titles, list items, and text."
          ]
        },
        {
          "type": "paragraph",
          "text": "LangChain implements an UnstructuredMarkdownLoader object which requires the Unstructured package. First we install it:"
        },
        {
          "type": "code",
          "code": "%pip install \"unstructured[md]\" nltk"
        },
        {
          "type": "paragraph",
          "text": "Basic usage will ingest a Markdown file to a single document. Here we demonstrate on LangChain's readme:"
        },
        {
          "type": "code",
          "code": "from langchain_community.document_loaders import UnstructuredMarkdownLoaderfrom langchain_core.documents import Documentmarkdown_path = \"../../../README.md\"loader = UnstructuredMarkdownLoader(markdown_path)data = loader.load()assert len(data) == 1assert isinstance(data[0], Document)readme_content = data[0].page_contentprint(readme_content[:250])"
        },
        {
          "type": "code",
          "code": "ü¶úÔ∏èüîó LangChain‚ö° Build context-aware reasoning applications ‚ö°Looking for the JS/TS library? Check out LangChain.js.To help you ship LangChain apps to production faster, check out LangSmith. LangSmith is a unified developer platform for building,"
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Retain Elements‚Äã",
          "anchor": "retain-elements",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Under the hood, Unstructured creates different \"elements\" for different chunks of text. By default we combine those together, but you can easily keep that separation by specifying mode=\"elements\"."
            },
            {
              "type": "code",
              "code": "loader = UnstructuredMarkdownLoader(markdown_path, mode=\"elements\")data = loader.load()print(f\"Number of documents: {len(data)}\\n\")for document in data[:2]:    print(f\"{document}\\n\")"
            },
            {
              "type": "code",
              "code": "Number of documents: 66page_content='ü¶úÔ∏èüîó LangChain' metadata={'source': '../../../README.md', 'category_depth': 0, 'last_modified': '2024-06-28T15:20:01', 'languages': ['eng'], 'filetype': 'text/markdown', 'file_directory': '../../..', 'filename': 'README.md', 'category': 'Title'}page_content='‚ö° Build context-aware reasoning applications ‚ö°' metadata={'source': '../../../README.md', 'last_modified': '2024-06-28T15:20:01', 'languages': ['eng'], 'parent_id': '200b8a7d0dd03f66e4f13456566d2b3a', 'filetype': 'text/markdown', 'file_directory': '../../..', 'filename': 'README.md', 'category': 'NarrativeText'}"
            },
            {
              "type": "paragraph",
              "text": "Note that in this case we recover three distinct element types:"
            },
            {
              "type": "code",
              "code": "print(set(document.metadata[\"category\"] for document in data))"
            },
            {
              "type": "code",
              "code": "{'ListItem', 'NarrativeText', 'Title'}"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Retain Elements"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
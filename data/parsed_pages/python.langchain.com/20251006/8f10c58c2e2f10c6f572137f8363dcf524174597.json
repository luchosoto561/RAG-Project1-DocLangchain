{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/tool_configure/",
    "title": "How to access the RunnableConfig from a tool | 🦜️🔗 LangChain",
    "fetched_at": "2025-10-06T21:56:36.663551"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to access the RunnableConfig from a tool | 🦜️🔗 LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "This guide assumes familiarity with the following concepts:"
        },
        {
          "type": "list",
          "ordered": false,
          "items": [
            "LangChain Tools",
            "Custom tools",
            "LangChain Expression Language (LCEL)",
            "Configuring runnable behavior"
          ]
        },
        {
          "type": "paragraph",
          "text": "If you have a tool that calls chat models, retrievers, or other runnables, you may want to access internal events from those runnables or configure them with additional properties. This guide shows you how to manually pass parameters properly so that you can do this using the astream_events() method."
        },
        {
          "type": "paragraph",
          "text": "Tools are runnables, and you can treat them the same way as any other runnable at the interface level - you can call invoke(), batch(), and stream() on them as normal. However, when writing custom tools, you may want to invoke other runnables like chat models or retrievers. In order to properly trace and configure those sub-invocations, you'll need to manually access and pass in the tool's current RunnableConfig object. This guide show you some examples of how to do that."
        },
        {
          "type": "paragraph",
          "text": "This guide requires langchain-core>=0.2.16."
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Inferring by parameter type​",
          "anchor": "inferring-by-parameter-type",
          "blocks": [
            {
              "type": "paragraph",
              "text": "To access reference the active config object from your custom tool, you'll need to add a parameter to your tool's signature typed as RunnableConfig. When you invoke your tool, LangChain will inspect your tool's signature, look for a parameter typed as RunnableConfig, and if it exists, populate that parameter with the correct value."
            },
            {
              "type": "paragraph",
              "text": "Note: The actual name of the parameter doesn't matter, only the typing."
            },
            {
              "type": "paragraph",
              "text": "To illustrate this, define a custom tool that takes a two parameters - one typed as a string, the other typed as RunnableConfig:"
            },
            {
              "type": "code",
              "code": "%pip install -qU langchain_core"
            },
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableConfigfrom langchain_core.tools import tool@toolasync def reverse_tool(text: str, special_config_param: RunnableConfig) -> str:    \"\"\"A test tool that combines input text with a configurable parameter.\"\"\"    return (text + special_config_param[\"configurable\"][\"additional_field\"])[::-1]"
            },
            {
              "type": "paragraph",
              "text": "Then, if we invoke the tool with a config containing a configurable field, we can see that additional_field is passed through correctly:"
            },
            {
              "type": "code",
              "code": "await reverse_tool.ainvoke(    {\"text\": \"abc\"}, config={\"configurable\": {\"additional_field\": \"123\"}})"
            },
            {
              "type": "code",
              "code": "'321cba'"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Next steps​",
          "anchor": "next-steps",
          "blocks": [
            {
              "type": "paragraph",
              "text": "You've now seen how to configure and stream events from within a tool. Next, check out the following guides for more on using tools:"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Stream events from child runs within a custom tool",
                "Pass tool results back to a model"
              ]
            },
            {
              "type": "paragraph",
              "text": "You can also check out some more specific uses of tool calling:"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Building tool-using chains and agents",
                "Getting structured outputs from models"
              ]
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Inferring by parameter type",
                "Next steps"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
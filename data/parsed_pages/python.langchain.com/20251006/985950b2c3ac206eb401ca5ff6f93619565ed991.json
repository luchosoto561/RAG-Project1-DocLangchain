{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/tools_as_openai_functions/",
    "title": "How to convert tools to OpenAI Functions | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:56:41.882727"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to convert tools to OpenAI Functions | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "This notebook goes over how to use LangChain tools as OpenAI functions."
        },
        {
          "type": "code",
          "code": "%pip install -qU langchain-community langchain-openai"
        },
        {
          "type": "code",
          "code": "from langchain_community.tools import MoveFileToolfrom langchain_core.messages import HumanMessagefrom langchain_core.utils.function_calling import convert_to_openai_functionfrom langchain_openai import ChatOpenAI"
        },
        {
          "type": "code",
          "code": "model = ChatOpenAI(model=\"gpt-3.5-turbo\")"
        },
        {
          "type": "code",
          "code": "tools = [MoveFileTool()]functions = [convert_to_openai_function(t) for t in tools]"
        },
        {
          "type": "code",
          "code": "functions[0]"
        },
        {
          "type": "code",
          "code": "{'name': 'move_file', 'description': 'Move or rename a file from one location to another', 'parameters': {'type': 'object',  'properties': {'source_path': {'description': 'Path of the file to move',    'type': 'string'},   'destination_path': {'description': 'New path for the moved file',    'type': 'string'}},  'required': ['source_path', 'destination_path']}}"
        },
        {
          "type": "code",
          "code": "message = model.invoke(    [HumanMessage(content=\"move file foo to bar\")], functions=functions)"
        },
        {
          "type": "code",
          "code": "message"
        },
        {
          "type": "code",
          "code": "AIMessage(content='', additional_kwargs={'function_call': {'arguments': '{\\n  \"source_path\": \"foo\",\\n  \"destination_path\": \"bar\"\\n}', 'name': 'move_file'}})"
        },
        {
          "type": "code",
          "code": "message.additional_kwargs[\"function_call\"]"
        },
        {
          "type": "code",
          "code": "{'name': 'move_file', 'arguments': '{\\n  \"source_path\": \"foo\",\\n  \"destination_path\": \"bar\"\\n}'}"
        },
        {
          "type": "paragraph",
          "text": "With OpenAI chat models we can also automatically bind and convert function-like objects with bind_functions"
        },
        {
          "type": "code",
          "code": "model_with_functions = model.bind_functions(tools)model_with_functions.invoke([HumanMessage(content=\"move file foo to bar\")])"
        },
        {
          "type": "code",
          "code": "AIMessage(content='', additional_kwargs={'function_call': {'arguments': '{\\n  \"source_path\": \"foo\",\\n  \"destination_path\": \"bar\"\\n}', 'name': 'move_file'}})"
        },
        {
          "type": "paragraph",
          "text": "Or we can use the update OpenAI API that uses tools and tool_choice instead of functions and function_call by using ChatOpenAI.bind_tools:"
        },
        {
          "type": "code",
          "code": "model_with_tools = model.bind_tools(tools)model_with_tools.invoke([HumanMessage(content=\"move file foo to bar\")])"
        },
        {
          "type": "code",
          "code": "AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_btkY3xV71cEVAOHnNa5qwo44', 'function': {'arguments': '{\\n  \"source_path\": \"foo\",\\n  \"destination_path\": \"bar\"\\n}', 'name': 'move_file'}, 'type': 'function'}]})"
        }
      ],
      "children": []
    }
  ]
}
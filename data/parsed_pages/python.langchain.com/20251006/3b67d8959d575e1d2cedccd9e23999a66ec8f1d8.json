{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/example_selectors_similarity/",
    "title": "How to select examples by similarity | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:55:36.600817"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to select examples by similarity | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "This object selects examples based on similarity to the inputs. It does this by finding the examples with the embeddings that have the greatest cosine similarity with the inputs."
        },
        {
          "type": "code",
          "code": "from langchain_chroma import Chromafrom langchain_core.example_selectors import SemanticSimilarityExampleSelectorfrom langchain_core.prompts import FewShotPromptTemplate, PromptTemplatefrom langchain_openai import OpenAIEmbeddingsexample_prompt = PromptTemplate(    input_variables=[\"input\", \"output\"],    template=\"Input: {input}\\nOutput: {output}\",)# Examples of a pretend task of creating antonyms.examples = [    {\"input\": \"happy\", \"output\": \"sad\"},    {\"input\": \"tall\", \"output\": \"short\"},    {\"input\": \"energetic\", \"output\": \"lethargic\"},    {\"input\": \"sunny\", \"output\": \"gloomy\"},    {\"input\": \"windy\", \"output\": \"calm\"},]"
        },
        {
          "type": "code",
          "code": "example_selector = SemanticSimilarityExampleSelector.from_examples(    # The list of examples available to select from.    examples,    # The embedding class used to produce embeddings which are used to measure semantic similarity.    OpenAIEmbeddings(),    # The VectorStore class that is used to store the embeddings and do a similarity search over.    Chroma,    # The number of examples to produce.    k=1,)similar_prompt = FewShotPromptTemplate(    # We provide an ExampleSelector instead of examples.    example_selector=example_selector,    example_prompt=example_prompt,    prefix=\"Give the antonym of every input\",    suffix=\"Input: {adjective}\\nOutput:\",    input_variables=[\"adjective\"],)"
        },
        {
          "type": "code",
          "code": "# Input is a feeling, so should select the happy/sad exampleprint(similar_prompt.format(adjective=\"worried\"))"
        },
        {
          "type": "code",
          "code": "Give the antonym of every inputInput: happyOutput: sadInput: worriedOutput:"
        },
        {
          "type": "code",
          "code": "# Input is a measurement, so should select the tall/short exampleprint(similar_prompt.format(adjective=\"large\"))"
        },
        {
          "type": "code",
          "code": "Give the antonym of every inputInput: tallOutput: shortInput: largeOutput:"
        },
        {
          "type": "code",
          "code": "# You can add new examples to the SemanticSimilarityExampleSelector as wellsimilar_prompt.example_selector.add_example(    {\"input\": \"enthusiastic\", \"output\": \"apathetic\"})print(similar_prompt.format(adjective=\"passionate\"))"
        },
        {
          "type": "code",
          "code": "Give the antonym of every inputInput: enthusiasticOutput: apatheticInput: passionateOutput:"
        }
      ],
      "children": []
    }
  ]
}
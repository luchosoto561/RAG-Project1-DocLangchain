{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/embed_text/",
    "title": "Text embedding models | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:55:29.911481"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "Text embedding models | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "Head to Integrations for documentation on built-in integrations with text embedding model providers."
        },
        {
          "type": "paragraph",
          "text": "The Embeddings class is a class designed for interfacing with text embedding models. There are lots of embedding model providers (OpenAI, Cohere, Hugging Face, etc) - this class is designed to provide a standard interface for all of them."
        },
        {
          "type": "paragraph",
          "text": "Embeddings create a vector representation of a piece of text. This is useful because it means we can think about text in the vector space, and do things like semantic search where we look for pieces of text that are most similar in the vector space."
        },
        {
          "type": "paragraph",
          "text": "The base Embeddings class in LangChain provides two methods: one for embedding documents and one for embedding a query. The former, .embed_documents, takes as input multiple texts, while the latter, .embed_query, takes a single text. The reason for having these as two separate methods is that some embedding providers have different embedding methods for documents (to be searched over) vs queries (the search query itself). .embed_query will return a list of floats, whereas .embed_documents returns a list of lists of floats."
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Get started‚Äã",
          "anchor": "get-started",
          "blocks": [],
          "children": [
            {
              "level": 3,
              "heading_text": "Setup‚Äã",
              "anchor": "setup",
              "blocks": [
                {
                  "type": "code",
                  "code": "pip install -qU langchain-openai"
                },
                {
                  "type": "code",
                  "code": "import getpassimport osif not os.environ.get(\"OPENAI_API_KEY\"):  os.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"Enter API key for OpenAI: \")from langchain_openai import OpenAIEmbeddingsembeddings_model = OpenAIEmbeddings(model=\"text-embedding-3-large\")"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "embed_documents‚Äã",
              "anchor": "embed_documents",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "Use .embed_documents to embed a list of strings, recovering a list of embeddings:"
                },
                {
                  "type": "code",
                  "code": "embeddings = embeddings_model.embed_documents(    [        \"Hi there!\",        \"Oh, hello!\",        \"What's your name?\",        \"My friends call me World\",        \"Hello World!\"    ])len(embeddings), len(embeddings[0])"
                },
                {
                  "type": "code",
                  "code": "(5, 1536)"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "embed_query‚Äã",
              "anchor": "embed_query",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "Use .embed_query to embed a single piece of text (e.g., for the purpose of comparing to other embedded pieces of texts)."
                },
                {
                  "type": "code",
                  "code": "embedded_query = embeddings_model.embed_query(\"What was the name mentioned in the conversation?\")embedded_query[:5]"
                },
                {
                  "type": "code",
                  "code": "[0.0053587136790156364, -0.0004999046213924885, 0.038883671164512634, -0.003001077566295862, -0.00900818221271038]"
                },
                {
                  "type": "list",
                  "ordered": false,
                  "items": [
                    "Setup",
                    "embed_documents",
                    "embed_query"
                  ]
                }
              ],
              "children": []
            }
          ]
        }
      ]
    }
  ]
}
{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/lcel_cheatsheet/",
    "title": "LangChain Expression Language Cheatsheet | 🦜️🔗 LangChain",
    "fetched_at": "2025-10-06T21:55:45.896512"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "LangChain Expression Language Cheatsheet | 🦜️🔗 LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "This is a quick reference for all the most important LCEL primitives. For more advanced usage see the LCEL how-to guides and the full API reference."
        }
      ],
      "children": [
        {
          "level": 3,
          "heading_text": "Invoke a runnable​",
          "anchor": "invoke-a-runnable",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambdarunnable = RunnableLambda(lambda x: str(x))runnable.invoke(5)# Async variant:# await runnable.ainvoke(5)"
            },
            {
              "type": "code",
              "code": "'5'"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Batch a runnable​",
          "anchor": "batch-a-runnable",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambdarunnable = RunnableLambda(lambda x: str(x))runnable.batch([7, 8, 9])# Async variant:# await runnable.abatch([7, 8, 9])"
            },
            {
              "type": "code",
              "code": "['7', '8', '9']"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Stream a runnable​",
          "anchor": "stream-a-runnable",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambdadef func(x):    for y in x:        yield str(y)runnable = RunnableLambda(func)for chunk in runnable.stream(range(5)):    print(chunk)# Async variant:# async for chunk in await runnable.astream(range(5)):#     print(chunk)"
            },
            {
              "type": "code",
              "code": "01234"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Compose runnables​",
          "anchor": "compose-runnables",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambdarunnable1 = RunnableLambda(lambda x: {\"foo\": x})runnable2 = RunnableLambda(lambda x: [x] * 2)chain = runnable1 | runnable2chain.invoke(2)"
            },
            {
              "type": "code",
              "code": "[{'foo': 2}, {'foo': 2}]"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Invoke runnables in parallel​",
          "anchor": "invoke-runnables-in-parallel",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambda, RunnableParallelrunnable1 = RunnableLambda(lambda x: {\"foo\": x})runnable2 = RunnableLambda(lambda x: [x] * 2)chain = RunnableParallel(first=runnable1, second=runnable2)chain.invoke(2)"
            },
            {
              "type": "code",
              "code": "{'first': {'foo': 2}, 'second': [2, 2]}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Turn any function into a runnable​",
          "anchor": "turn-any-function-into-a-runnable",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambdadef func(x):    return x + 5runnable = RunnableLambda(func)runnable.invoke(2)"
            },
            {
              "type": "code",
              "code": "7"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Merge input and output dicts​",
          "anchor": "merge-input-and-output-dicts",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambda, RunnablePassthroughrunnable1 = RunnableLambda(lambda x: x[\"foo\"] + 7)chain = RunnablePassthrough.assign(bar=runnable1)chain.invoke({\"foo\": 10})"
            },
            {
              "type": "code",
              "code": "{'foo': 10, 'bar': 17}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Include input dict in output dict​",
          "anchor": "include-input-dict-in-output-dict",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import (    RunnableLambda,    RunnableParallel,    RunnablePassthrough,)runnable1 = RunnableLambda(lambda x: x[\"foo\"] + 7)chain = RunnableParallel(bar=runnable1, baz=RunnablePassthrough())chain.invoke({\"foo\": 10})"
            },
            {
              "type": "code",
              "code": "{'bar': 17, 'baz': {'foo': 10}}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Add default invocation args​",
          "anchor": "add-default-invocation-args",
          "blocks": [
            {
              "type": "code",
              "code": "from typing import Optionalfrom langchain_core.runnables import RunnableLambdadef func(main_arg: dict, other_arg: Optional[str] = None) -> dict:    if other_arg:        return {**main_arg, **{\"foo\": other_arg}}    return main_argrunnable1 = RunnableLambda(func)bound_runnable1 = runnable1.bind(other_arg=\"bye\")bound_runnable1.invoke({\"bar\": \"hello\"})"
            },
            {
              "type": "code",
              "code": "{'bar': 'hello', 'foo': 'bye'}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Add fallbacks​",
          "anchor": "add-fallbacks",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambdarunnable1 = RunnableLambda(lambda x: x + \"foo\")runnable2 = RunnableLambda(lambda x: str(x) + \"foo\")chain = runnable1.with_fallbacks([runnable2])chain.invoke(5)"
            },
            {
              "type": "code",
              "code": "'5foo'"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Add retries​",
          "anchor": "add-retries",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambdacounter = -1def func(x):    global counter    counter += 1    print(f\"attempt with {counter=}\")    return x / counterchain = RunnableLambda(func).with_retry(stop_after_attempt=2)chain.invoke(2)"
            },
            {
              "type": "code",
              "code": "attempt with counter=0attempt with counter=1"
            },
            {
              "type": "code",
              "code": "2.0"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Configure runnable execution​",
          "anchor": "configure-runnable-execution",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambda, RunnableParallelrunnable1 = RunnableLambda(lambda x: {\"foo\": x})runnable2 = RunnableLambda(lambda x: [x] * 2)runnable3 = RunnableLambda(lambda x: str(x))chain = RunnableParallel(first=runnable1, second=runnable2, third=runnable3)chain.invoke(7, config={\"max_concurrency\": 2})"
            },
            {
              "type": "code",
              "code": "{'first': {'foo': 7}, 'second': [7, 7], 'third': '7'}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Add default config to runnable​",
          "anchor": "add-default-config-to-runnable",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambda, RunnableParallelrunnable1 = RunnableLambda(lambda x: {\"foo\": x})runnable2 = RunnableLambda(lambda x: [x] * 2)runnable3 = RunnableLambda(lambda x: str(x))chain = RunnableParallel(first=runnable1, second=runnable2, third=runnable3)configured_chain = chain.with_config(max_concurrency=2)chain.invoke(7)"
            },
            {
              "type": "code",
              "code": "{'first': {'foo': 7}, 'second': [7, 7], 'third': '7'}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Make runnable attributes configurable​",
          "anchor": "make-runnable-attributes-configurable",
          "blocks": [
            {
              "type": "code",
              "code": "from typing import Any, Optionalfrom langchain_core.runnables import (    ConfigurableField,    RunnableConfig,    RunnableSerializable,)class FooRunnable(RunnableSerializable[dict, dict]):    output_key: str    def invoke(        self, input: Any, config: Optional[RunnableConfig] = None, **kwargs: Any    ) -> list:        return self._call_with_config(self.subtract_seven, input, config, **kwargs)    def subtract_seven(self, input: dict) -> dict:        return {self.output_key: input[\"foo\"] - 7}runnable1 = FooRunnable(output_key=\"bar\")configurable_runnable1 = runnable1.configurable_fields(    output_key=ConfigurableField(id=\"output_key\"))configurable_runnable1.invoke(    {\"foo\": 10}, config={\"configurable\": {\"output_key\": \"not bar\"}})"
            },
            {
              "type": "code",
              "code": "{'not bar': 3}"
            },
            {
              "type": "code",
              "code": "configurable_runnable1.invoke({\"foo\": 10})"
            },
            {
              "type": "code",
              "code": "{'bar': 3}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Make chain components configurable​",
          "anchor": "make-chain-components-configurable",
          "blocks": [
            {
              "type": "code",
              "code": "from typing import Any, Optionalfrom langchain_core.runnables import RunnableConfig, RunnableLambda, RunnableParallelclass ListRunnable(RunnableSerializable[Any, list]):    def invoke(        self, input: Any, config: Optional[RunnableConfig] = None, **kwargs: Any    ) -> list:        return self._call_with_config(self.listify, input, config, **kwargs)    def listify(self, input: Any) -> list:        return [input]class StrRunnable(RunnableSerializable[Any, str]):    def invoke(        self, input: Any, config: Optional[RunnableConfig] = None, **kwargs: Any    ) -> list:        return self._call_with_config(self.strify, input, config, **kwargs)    def strify(self, input: Any) -> str:        return str(input)runnable1 = RunnableLambda(lambda x: {\"foo\": x})configurable_runnable = ListRunnable().configurable_alternatives(    ConfigurableField(id=\"second_step\"), default_key=\"list\", string=StrRunnable())chain = runnable1 | configurable_runnablechain.invoke(7, config={\"configurable\": {\"second_step\": \"string\"}})"
            },
            {
              "type": "code",
              "code": "\"{'foo': 7}\""
            },
            {
              "type": "code",
              "code": "chain.invoke(7)"
            },
            {
              "type": "code",
              "code": "[{'foo': 7}]"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Build a chain dynamically based on input​",
          "anchor": "build-a-chain-dynamically-based-on-input",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambda, RunnableParallelrunnable1 = RunnableLambda(lambda x: {\"foo\": x})runnable2 = RunnableLambda(lambda x: [x] * 2)chain = RunnableLambda(lambda x: runnable1 if x > 6 else runnable2)chain.invoke(7)"
            },
            {
              "type": "code",
              "code": "{'foo': 7}"
            },
            {
              "type": "code",
              "code": "chain.invoke(5)"
            },
            {
              "type": "code",
              "code": "[5, 5]"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Generate a stream of events​",
          "anchor": "generate-a-stream-of-events",
          "blocks": [
            {
              "type": "code",
              "code": "# | echo: falseimport nest_asyncionest_asyncio.apply()"
            },
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambda, RunnableParallelrunnable1 = RunnableLambda(lambda x: {\"foo\": x}, name=\"first\")async def func(x):    for _ in range(5):        yield xrunnable2 = RunnableLambda(func, name=\"second\")chain = runnable1 | runnable2async for event in chain.astream_events(\"bar\", version=\"v2\"):    print(f\"event={event['event']} | name={event['name']} | data={event['data']}\")"
            },
            {
              "type": "code",
              "code": "event=on_chain_start | name=RunnableSequence | data={'input': 'bar'}event=on_chain_start | name=first | data={}event=on_chain_stream | name=first | data={'chunk': {'foo': 'bar'}}event=on_chain_start | name=second | data={}event=on_chain_end | name=first | data={'output': {'foo': 'bar'}, 'input': 'bar'}event=on_chain_stream | name=second | data={'chunk': {'foo': 'bar'}}event=on_chain_stream | name=RunnableSequence | data={'chunk': {'foo': 'bar'}}event=on_chain_stream | name=second | data={'chunk': {'foo': 'bar'}}event=on_chain_stream | name=RunnableSequence | data={'chunk': {'foo': 'bar'}}event=on_chain_stream | name=second | data={'chunk': {'foo': 'bar'}}event=on_chain_stream | name=RunnableSequence | data={'chunk': {'foo': 'bar'}}event=on_chain_stream | name=second | data={'chunk': {'foo': 'bar'}}event=on_chain_stream | name=RunnableSequence | data={'chunk': {'foo': 'bar'}}event=on_chain_stream | name=second | data={'chunk': {'foo': 'bar'}}event=on_chain_stream | name=RunnableSequence | data={'chunk': {'foo': 'bar'}}event=on_chain_end | name=second | data={'output': {'foo': 'bar'}, 'input': {'foo': 'bar'}}event=on_chain_end | name=RunnableSequence | data={'output': {'foo': 'bar'}}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Yield batched outputs as they complete​",
          "anchor": "yield-batched-outputs-as-they-complete",
          "blocks": [
            {
              "type": "code",
              "code": "import timefrom langchain_core.runnables import RunnableLambda, RunnableParallelrunnable1 = RunnableLambda(lambda x: time.sleep(x) or print(f\"slept {x}\"))for idx, result in runnable1.batch_as_completed([5, 1]):    print(idx, result)# Async variant:# async for idx, result in runnable1.abatch_as_completed([5, 1]):#     print(idx, result)"
            },
            {
              "type": "code",
              "code": "slept 11 Noneslept 50 None"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Return subset of output dict​",
          "anchor": "return-subset-of-output-dict",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambda, RunnablePassthroughrunnable1 = RunnableLambda(lambda x: x[\"baz\"] + 5)chain = RunnablePassthrough.assign(foo=runnable1).pick([\"foo\", \"bar\"])chain.invoke({\"bar\": \"hi\", \"baz\": 2})"
            },
            {
              "type": "code",
              "code": "{'foo': 7, 'bar': 'hi'}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Declaratively make a batched version of a runnable​",
          "anchor": "declaratively-make-a-batched-version-of-a-runnable",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambdarunnable1 = RunnableLambda(lambda x: list(range(x)))runnable2 = RunnableLambda(lambda x: x + 5)chain = runnable1 | runnable2.map()chain.invoke(3)"
            },
            {
              "type": "code",
              "code": "[5, 6, 7]"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Get a graph representation of a runnable​",
          "anchor": "get-a-graph-representation-of-a-runnable",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.runnables import RunnableLambda, RunnableParallelrunnable1 = RunnableLambda(lambda x: {\"foo\": x})runnable2 = RunnableLambda(lambda x: [x] * 2)runnable3 = RunnableLambda(lambda x: str(x))chain = runnable1 | RunnableParallel(second=runnable2, third=runnable3)chain.get_graph().print_ascii()"
            },
            {
              "type": "code",
              "code": "                             +-------------+                                                           | LambdaInput |                                                           +-------------+                                                                  *                                                                         *                                                                         *                                                         +------------------------------+                                          | Lambda(lambda x: {'foo': x}) |                                          +------------------------------+                                                          *                                                                         *                                                                         *                                                          +-----------------------------+                                           | Parallel<second,third>Input |                                           +-----------------------------+                                              ****                  ***                                             ****                         ****                                       **                                 **                   +---------------------------+               +--------------------------+  | Lambda(lambda x: [x] * 2) |               | Lambda(lambda x: str(x)) |  +---------------------------+               +--------------------------+                          ****                  ***                                                     ****          ****                                                            **      **                                                    +------------------------------+                                          | Parallel<second,third>Output |                                          +------------------------------+"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Get all prompts in a chain​",
          "anchor": "get-all-prompts-in-a-chain",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.prompts import ChatPromptTemplatefrom langchain_core.runnables import RunnableLambdaprompt1 = ChatPromptTemplate.from_messages(    [(\"system\", \"good ai\"), (\"human\", \"{input}\")])prompt2 = ChatPromptTemplate.from_messages(    [        (\"system\", \"really good ai\"),        (\"human\", \"{input}\"),        (\"ai\", \"{ai_output}\"),        (\"human\", \"{input2}\"),    ])fake_llm = RunnableLambda(lambda prompt: \"i am good ai\")chain = prompt1.assign(ai_output=fake_llm) | prompt2 | fake_llmfor i, prompt in enumerate(chain.get_prompts()):    print(f\"**prompt {i=}**\\n\")    print(prompt.pretty_repr())    print(\"\\n\" * 3)"
            },
            {
              "type": "code",
              "code": "**prompt i=0**================================ System Message ================================good ai================================ Human Message ================================={input}**prompt i=1**================================ System Message ================================really good ai================================ Human Message ================================={input}================================== AI Message =================================={ai_output}================================ Human Message ================================={input2}"
            }
          ],
          "children": []
        },
        {
          "level": 3,
          "heading_text": "Add lifecycle listeners​",
          "anchor": "add-lifecycle-listeners",
          "blocks": [
            {
              "type": "code",
              "code": "import timefrom langchain_core.runnables import RunnableLambdafrom langchain_core.tracers.schemas import Rundef on_start(run_obj: Run):    print(\"start_time:\", run_obj.start_time)def on_end(run_obj: Run):    print(\"end_time:\", run_obj.end_time)runnable1 = RunnableLambda(lambda x: time.sleep(x))chain = runnable1.with_listeners(on_start=on_start, on_end=on_end)chain.invoke(2)"
            },
            {
              "type": "code",
              "code": "start_time: 2024-05-17 23:04:00.951065+00:00end_time: 2024-05-17 23:04:02.958765+00:00"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Invoke a runnable",
                "Batch a runnable",
                "Stream a runnable",
                "Compose runnables",
                "Invoke runnables in parallel",
                "Turn any function into a runnable",
                "Merge input and output dicts",
                "Include input dict in output dict",
                "Add default invocation args",
                "Add fallbacks",
                "Add retries",
                "Configure runnable execution",
                "Add default config to runnable",
                "Make runnable attributes configurable",
                "Make chain components configurable",
                "Build a chain dynamically based on input",
                "Generate a stream of events",
                "Yield batched outputs as they complete",
                "Return subset of output dict",
                "Declaratively make a batched version of a runnable",
                "Get a graph representation of a runnable",
                "Get all prompts in a chain",
                "Add lifecycle listeners"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
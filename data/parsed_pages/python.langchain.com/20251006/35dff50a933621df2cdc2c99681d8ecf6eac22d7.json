{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/time_weighted_vectorstore/",
    "title": "How to use a time-weighted vector store retriever | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:56:31.097448"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to use a time-weighted vector store retriever | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "This retriever uses a combination of semantic similarity and a time decay."
        },
        {
          "type": "paragraph",
          "text": "The algorithm for scoring them is:"
        },
        {
          "type": "code",
          "code": "semantic_similarity + (1.0 - decay_rate) ^ hours_passed"
        },
        {
          "type": "paragraph",
          "text": "Notably, hours_passed refers to the hours passed since the object in the retriever was last accessed, not since it was created. This means that frequently accessed objects remain \"fresh\"."
        },
        {
          "type": "code",
          "code": "from datetime import datetime, timedeltaimport faissfrom langchain.retrievers import TimeWeightedVectorStoreRetrieverfrom langchain_community.docstore import InMemoryDocstorefrom langchain_community.vectorstores import FAISSfrom langchain_core.documents import Documentfrom langchain_openai import OpenAIEmbeddings"
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Low decay rate‚Äã",
          "anchor": "low-decay-rate",
          "blocks": [
            {
              "type": "paragraph",
              "text": "A low decay rate (in this, to be extreme, we will set it close to 0) means memories will be \"remembered\" for longer. A decay rate of 0 means memories never be forgotten, making this retriever equivalent to the vector lookup."
            },
            {
              "type": "code",
              "code": "# Define your embedding modelembeddings_model = OpenAIEmbeddings()# Initialize the vectorstore as emptyembedding_size = 1536index = faiss.IndexFlatL2(embedding_size)vectorstore = FAISS(embeddings_model, index, InMemoryDocstore({}), {})retriever = TimeWeightedVectorStoreRetriever(    vectorstore=vectorstore, decay_rate=0.0000000000000000000000001, k=1)"
            },
            {
              "type": "code",
              "code": "yesterday = datetime.now() - timedelta(days=1)retriever.add_documents(    [Document(page_content=\"hello world\", metadata={\"last_accessed_at\": yesterday})])retriever.add_documents([Document(page_content=\"hello foo\")])"
            },
            {
              "type": "code",
              "code": "['73679bc9-d425-49c2-9d74-de6356c73489']"
            },
            {
              "type": "code",
              "code": "# \"Hello World\" is returned first because it is most salient, and the decay rate is close to 0., meaning it's still recent enoughretriever.invoke(\"hello world\")"
            },
            {
              "type": "code",
              "code": "[Document(metadata={'last_accessed_at': datetime.datetime(2024, 10, 22, 16, 37, 40, 818583), 'created_at': datetime.datetime(2024, 10, 22, 16, 37, 37, 975074), 'buffer_idx': 0}, page_content='hello world')]"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "High decay rate‚Äã",
          "anchor": "high-decay-rate",
          "blocks": [
            {
              "type": "paragraph",
              "text": "With a high decay rate (e.g., several 9's), the recency score quickly goes to 0! If you set this all the way to 1, recency is 0 for all objects, once again making this equivalent to a vector lookup."
            },
            {
              "type": "code",
              "code": "# Define your embedding modelembeddings_model = OpenAIEmbeddings()# Initialize the vectorstore as emptyembedding_size = 1536index = faiss.IndexFlatL2(embedding_size)vectorstore = FAISS(embeddings_model, index, InMemoryDocstore({}), {})retriever = TimeWeightedVectorStoreRetriever(    vectorstore=vectorstore, decay_rate=0.999, k=1)"
            },
            {
              "type": "code",
              "code": "yesterday = datetime.now() - timedelta(days=1)retriever.add_documents(    [Document(page_content=\"hello world\", metadata={\"last_accessed_at\": yesterday})])retriever.add_documents([Document(page_content=\"hello foo\")])"
            },
            {
              "type": "code",
              "code": "['379631f0-42c2-4773-8cc2-d36201e1e610']"
            },
            {
              "type": "code",
              "code": "# \"Hello Foo\" is returned first because \"hello world\" is mostly forgottenretriever.invoke(\"hello world\")"
            },
            {
              "type": "code",
              "code": "[Document(metadata={'last_accessed_at': datetime.datetime(2024, 10, 22, 16, 37, 46, 553633), 'created_at': datetime.datetime(2024, 10, 22, 16, 37, 43, 927429), 'buffer_idx': 1}, page_content='hello foo')]"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Virtual time‚Äã",
          "anchor": "virtual-time",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Using some utils in LangChain, you can mock out the time component."
            },
            {
              "type": "code",
              "code": "from langchain_core.utils import mock_now"
            },
            {
              "type": "code",
              "code": "# Notice the last access time is that date timetomorrow = datetime.now() + timedelta(days=1)with mock_now(tomorrow):    print(retriever.invoke(\"hello world\"))"
            },
            {
              "type": "code",
              "code": "[Document(metadata={'last_accessed_at': MockDateTime(2024, 10, 23, 16, 38, 19, 66711), 'created_at': datetime.datetime(2024, 10, 22, 16, 37, 43, 599877), 'buffer_idx': 0}, page_content='hello world')]"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Low decay rate",
                "High decay rate",
                "Virtual time"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
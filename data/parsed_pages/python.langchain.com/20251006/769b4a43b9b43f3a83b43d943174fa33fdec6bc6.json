{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/output_parser_fixing/",
    "title": "How to use the output-fixing parser | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:56:00.380588"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to use the output-fixing parser | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "This output parser wraps another output parser, and in the event that the first one fails it calls out to another LLM to fix any errors."
        },
        {
          "type": "paragraph",
          "text": "But we can do other things besides throw errors. Specifically, we can pass the misformatted output, along with the formatted instructions, to the model and ask it to fix it."
        },
        {
          "type": "paragraph",
          "text": "For this example, we'll use the above Pydantic output parser. Here's what happens if we pass it a result that does not comply with the schema:"
        },
        {
          "type": "code",
          "code": "from typing import Listfrom langchain_core.exceptions import OutputParserExceptionfrom langchain_core.output_parsers import PydanticOutputParserfrom langchain_openai import ChatOpenAIfrom pydantic import BaseModel, Field"
        },
        {
          "type": "code",
          "code": "class Actor(BaseModel):    name: str = Field(description=\"name of an actor\")    film_names: List[str] = Field(description=\"list of names of films they starred in\")actor_query = \"Generate the filmography for a random actor.\"parser = PydanticOutputParser(pydantic_object=Actor)"
        },
        {
          "type": "code",
          "code": "misformatted = \"{'name': 'Tom Hanks', 'film_names': ['Forrest Gump']}\""
        },
        {
          "type": "code",
          "code": "try:    parser.parse(misformatted)except OutputParserException as e:    print(e)"
        },
        {
          "type": "code",
          "code": "Invalid json output: {'name': 'Tom Hanks', 'film_names': ['Forrest Gump']}For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE"
        },
        {
          "type": "paragraph",
          "text": "Now we can construct and use a OutputFixingParser. This output parser takes as an argument another output parser but also an LLM with which to try to correct any formatting mistakes."
        },
        {
          "type": "code",
          "code": "from langchain.output_parsers import OutputFixingParsernew_parser = OutputFixingParser.from_llm(parser=parser, llm=ChatOpenAI())"
        },
        {
          "type": "code",
          "code": "new_parser.parse(misformatted)"
        },
        {
          "type": "code",
          "code": "Actor(name='Tom Hanks', film_names=['Forrest Gump'])"
        },
        {
          "type": "paragraph",
          "text": "Find out api documentation for OutputFixingParser."
        }
      ],
      "children": []
    }
  ]
}
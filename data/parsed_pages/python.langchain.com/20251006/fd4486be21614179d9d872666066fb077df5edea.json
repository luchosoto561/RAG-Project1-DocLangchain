{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/filter_messages/",
    "title": "How to filter messages | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:55:41.775232"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to filter messages | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "In more complex chains and agents we might track state with a list of messages. This list can start to accumulate messages from multiple different models, speakers, sub-chains, etc., and we may only want to pass subsets of this full list of messages to each model call in the chain/agent."
        },
        {
          "type": "paragraph",
          "text": "The filter_messages utility makes it easy to filter messages by type, id, or name."
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Basic usage‚Äã",
          "anchor": "basic-usage",
          "blocks": [
            {
              "type": "code",
              "code": "from langchain_core.messages import (    AIMessage,    HumanMessage,    SystemMessage,    filter_messages,)messages = [    SystemMessage(\"you are a good assistant\", id=\"1\"),    HumanMessage(\"example input\", id=\"2\", name=\"example_user\"),    AIMessage(\"example output\", id=\"3\", name=\"example_assistant\"),    HumanMessage(\"real input\", id=\"4\", name=\"bob\"),    AIMessage(\"real output\", id=\"5\", name=\"alice\"),]filter_messages(messages, include_types=\"human\")"
            },
            {
              "type": "code",
              "code": "[HumanMessage(content='example input', additional_kwargs={}, response_metadata={}, name='example_user', id='2'), HumanMessage(content='real input', additional_kwargs={}, response_metadata={}, name='bob', id='4')]"
            },
            {
              "type": "code",
              "code": "filter_messages(messages, exclude_names=[\"example_user\", \"example_assistant\"])"
            },
            {
              "type": "code",
              "code": "[SystemMessage(content='you are a good assistant', additional_kwargs={}, response_metadata={}, id='1'), HumanMessage(content='real input', additional_kwargs={}, response_metadata={}, name='bob', id='4'), AIMessage(content='real output', additional_kwargs={}, response_metadata={}, name='alice', id='5')]"
            },
            {
              "type": "code",
              "code": "filter_messages(messages, include_types=[HumanMessage, AIMessage], exclude_ids=[\"3\"])"
            },
            {
              "type": "code",
              "code": "[HumanMessage(content='example input', additional_kwargs={}, response_metadata={}, name='example_user', id='2'), HumanMessage(content='real input', additional_kwargs={}, response_metadata={}, name='bob', id='4'), AIMessage(content='real output', additional_kwargs={}, response_metadata={}, name='alice', id='5')]"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Chaining‚Äã",
          "anchor": "chaining",
          "blocks": [
            {
              "type": "paragraph",
              "text": "filter_messages can be used imperatively (like above) or declaratively, making it easy to compose with other components in a chain:"
            },
            {
              "type": "code",
              "code": "%pip install -qU langchain-anthropic"
            },
            {
              "type": "code",
              "code": "from langchain_anthropic import ChatAnthropicllm = ChatAnthropic(model=\"claude-3-7-sonnet-20250219\", temperature=0)# Notice we don't pass in messages. This creates# a RunnableLambda that takes messages as inputfilter_ = filter_messages(exclude_names=[\"example_user\", \"example_assistant\"])chain = filter_ | llmchain.invoke(messages)"
            },
            {
              "type": "code",
              "code": "AIMessage(content=[], additional_kwargs={}, response_metadata={'id': 'msg_01At8GtCiJ79M29yvNwCiQaB', 'model': 'claude-3-7-sonnet-20250219', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 16, 'output_tokens': 3, 'server_tool_use': None, 'service_tier': 'standard'}, 'model_name': 'claude-3-7-sonnet-20250219'}, id='run--b3db2b91-0edf-4c48-99e7-35e641b8229d-0', usage_metadata={'input_tokens': 16, 'output_tokens': 3, 'total_tokens': 19, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})"
            },
            {
              "type": "paragraph",
              "text": "Looking at the LangSmith trace we can see that before the messages are passed to the model they are filtered: https://smith.langchain.com/public/f808a724-e072-438e-9991-657cc9e7e253/r"
            },
            {
              "type": "paragraph",
              "text": "Looking at just the filter_, we can see that it's a Runnable object that can be invoked like all Runnables:"
            },
            {
              "type": "code",
              "code": "filter_.invoke(messages)"
            },
            {
              "type": "code",
              "code": "[SystemMessage(content='you are a good assistant', additional_kwargs={}, response_metadata={}, id='1'), HumanMessage(content='real input', additional_kwargs={}, response_metadata={}, name='bob', id='4'), AIMessage(content='real output', additional_kwargs={}, response_metadata={}, name='alice', id='5')]"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "API reference‚Äã",
          "anchor": "api-reference",
          "blocks": [
            {
              "type": "paragraph",
              "text": "For a complete description of all arguments head to the API reference: https://python.langchain.com/api_reference/core/messages/langchain_core.messages.utils.filter_messages.html"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Basic usage",
                "Chaining",
                "API reference"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
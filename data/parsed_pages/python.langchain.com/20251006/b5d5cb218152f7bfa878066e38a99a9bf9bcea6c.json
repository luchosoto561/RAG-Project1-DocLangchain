{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/hybrid/",
    "title": "Hybrid Search | 🦜️🔗 LangChain",
    "fetched_at": "2025-10-06T21:55:42.785719"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "Hybrid Search | 🦜️🔗 LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "The standard search in LangChain is done by vector similarity. However, a number of vector store implementations (Astra DB, ElasticSearch, Neo4J, AzureSearch, Qdrant...) also support more advanced search combining vector similarity search and other search techniques (full-text, BM25, and so on). This is generally referred to as \"Hybrid\" search."
        },
        {
          "type": "paragraph",
          "text": "Step 1: Make sure the vectorstore you are using supports hybrid search"
        },
        {
          "type": "paragraph",
          "text": "At the moment, there is no unified way to perform hybrid search in LangChain. Each vectorstore may have their own way to do it. This is generally exposed as a keyword argument that is passed in during similarity_search."
        },
        {
          "type": "paragraph",
          "text": "By reading the documentation or source code, figure out whether the vectorstore you are using supports hybrid search, and, if so, how to use it."
        },
        {
          "type": "paragraph",
          "text": "Step 2: Add that parameter as a configurable field for the chain"
        },
        {
          "type": "paragraph",
          "text": "This will let you easily call the chain and configure any relevant flags at runtime. See this documentation for more information on configuration."
        },
        {
          "type": "paragraph",
          "text": "Step 3: Call the chain with that configurable field"
        },
        {
          "type": "paragraph",
          "text": "Now, at runtime you can call this chain with configurable field."
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Code Example​",
          "anchor": "code-example",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Let's see a concrete example of what this looks like in code. We will use the Cassandra/CQL interface of Astra DB for this example."
            },
            {
              "type": "paragraph",
              "text": "Install the following Python package:"
            },
            {
              "type": "code",
              "code": "!pip install \"cassio>=0.1.7\""
            },
            {
              "type": "paragraph",
              "text": "Get the connection secrets."
            },
            {
              "type": "paragraph",
              "text": "Initialize cassio:"
            },
            {
              "type": "code",
              "code": "import cassiocassio.init(    database_id=\"Your database ID\",    token=\"Your application token\",    keyspace=\"Your key space\",)"
            },
            {
              "type": "paragraph",
              "text": "Create the Cassandra VectorStore with a standard index analyzer. The index analyzer is needed to enable term matching."
            },
            {
              "type": "code",
              "code": "from cassio.table.cql import STANDARD_ANALYZERfrom langchain_community.vectorstores import Cassandrafrom langchain_openai import OpenAIEmbeddingsembeddings = OpenAIEmbeddings()vectorstore = Cassandra(    embedding=embeddings,    table_name=\"test_hybrid\",    body_index_options=[STANDARD_ANALYZER],    session=None,    keyspace=None,)vectorstore.add_texts(    [        \"In 2023, I visited Paris\",        \"In 2022, I visited New York\",        \"In 2021, I visited New Orleans\",    ])"
            },
            {
              "type": "paragraph",
              "text": "If we do a standard similarity search, we get all the documents:"
            },
            {
              "type": "code",
              "code": "vectorstore.as_retriever().invoke(\"What city did I visit last?\")"
            },
            {
              "type": "code",
              "code": "[Document(page_content='In 2022, I visited New York'),Document(page_content='In 2023, I visited Paris'),Document(page_content='In 2021, I visited New Orleans')]"
            },
            {
              "type": "paragraph",
              "text": "The Astra DB vectorstore body_search argument can be used to filter the search on the term new."
            },
            {
              "type": "code",
              "code": "vectorstore.as_retriever(search_kwargs={\"body_search\": \"new\"}).invoke(    \"What city did I visit last?\")"
            },
            {
              "type": "code",
              "code": "[Document(page_content='In 2022, I visited New York'),Document(page_content='In 2021, I visited New Orleans')]"
            },
            {
              "type": "paragraph",
              "text": "We can now create the chain that we will use to do question-answering over"
            },
            {
              "type": "code",
              "code": "from langchain_core.output_parsers import StrOutputParserfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_core.runnables import (    ConfigurableField,    RunnablePassthrough,)from langchain_openai import ChatOpenAI"
            },
            {
              "type": "paragraph",
              "text": "This is basic question-answering chain set up."
            },
            {
              "type": "code",
              "code": "template = \"\"\"Answer the question based only on the following context:{context}Question: {question}\"\"\"prompt = ChatPromptTemplate.from_template(template)model = ChatOpenAI()retriever = vectorstore.as_retriever()"
            },
            {
              "type": "paragraph",
              "text": "Here we mark the retriever as having a configurable field. All vectorstore retrievers have search_kwargs as a field. This is just a dictionary, with vectorstore specific fields"
            },
            {
              "type": "code",
              "code": "configurable_retriever = retriever.configurable_fields(    search_kwargs=ConfigurableField(        id=\"search_kwargs\",        name=\"Search Kwargs\",        description=\"The search kwargs to use\",    ))"
            },
            {
              "type": "paragraph",
              "text": "We can now create the chain using our configurable retriever"
            },
            {
              "type": "code",
              "code": "chain = (    {\"context\": configurable_retriever, \"question\": RunnablePassthrough()}    | prompt    | model    | StrOutputParser())"
            },
            {
              "type": "code",
              "code": "chain.invoke(\"What city did I visit last?\")"
            },
            {
              "type": "code",
              "code": "Paris"
            },
            {
              "type": "paragraph",
              "text": "We can now invoke the chain with configurable options. search_kwargs is the id of the configurable field. The value is the search kwargs to use for Astra DB."
            },
            {
              "type": "code",
              "code": "chain.invoke(    \"What city did I visit last?\",    config={\"configurable\": {\"search_kwargs\": {\"body_search\": \"new\"}}},)"
            },
            {
              "type": "code",
              "code": "New York"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Code Example"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/vectorstore_retriever/",
    "title": "How to use a vectorstore as a retriever | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:54:17.563182"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to use a vectorstore as a retriever | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "A vector store retriever is a retriever that uses a vector store to retrieve documents. It is a lightweight wrapper around the vector store class to make it conform to the retriever interface. It uses the search methods implemented by a vector store, like similarity search and MMR, to query the texts in the vector store."
        },
        {
          "type": "paragraph",
          "text": "In this guide we will cover:"
        },
        {
          "type": "list",
          "ordered": true,
          "items": [
            "How to instantiate a retriever from a vectorstore;",
            "How to specify the search type for the retriever;",
            "How to specify additional search parameters, such as threshold scores and top-k."
          ]
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Creating a retriever from a vectorstore‚Äã",
          "anchor": "creating-a-retriever-from-a-vectorstore",
          "blocks": [
            {
              "type": "paragraph",
              "text": "You can build a retriever from a vectorstore using its .as_retriever method. Let's walk through an example."
            },
            {
              "type": "paragraph",
              "text": "First we instantiate a vectorstore. We will use an in-memory FAISS vectorstore:"
            },
            {
              "type": "code",
              "code": "from langchain_community.document_loaders import TextLoaderfrom langchain_community.vectorstores import FAISSfrom langchain_openai import OpenAIEmbeddingsfrom langchain_text_splitters import CharacterTextSplitterloader = TextLoader(\"state_of_the_union.txt\")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()vectorstore = FAISS.from_documents(texts, embeddings)"
            },
            {
              "type": "paragraph",
              "text": "We can then instantiate a retriever:"
            },
            {
              "type": "code",
              "code": "retriever = vectorstore.as_retriever()"
            },
            {
              "type": "paragraph",
              "text": "This creates a retriever (specifically a VectorStoreRetriever), which we can use in the usual way:"
            },
            {
              "type": "code",
              "code": "docs = retriever.invoke(\"what did the president say about ketanji brown jackson?\")"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Maximum marginal relevance retrieval‚Äã",
          "anchor": "maximum-marginal-relevance-retrieval",
          "blocks": [
            {
              "type": "paragraph",
              "text": "By default, the vector store retriever uses similarity search. If the underlying vector store supports maximum marginal relevance search, you can specify that as the search type."
            },
            {
              "type": "paragraph",
              "text": "This effectively specifies what method on the underlying vectorstore is used (e.g., similarity_search, max_marginal_relevance_search, etc.)."
            },
            {
              "type": "code",
              "code": "retriever = vectorstore.as_retriever(search_type=\"mmr\")"
            },
            {
              "type": "code",
              "code": "docs = retriever.invoke(\"what did the president say about ketanji brown jackson?\")"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Passing search parameters‚Äã",
          "anchor": "passing-search-parameters",
          "blocks": [
            {
              "type": "paragraph",
              "text": "We can pass parameters to the underlying vectorstore's search methods using search_kwargs."
            }
          ],
          "children": [
            {
              "level": 3,
              "heading_text": "Similarity score threshold retrieval‚Äã",
              "anchor": "similarity-score-threshold-retrieval",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "For example, we can set a similarity score threshold and only return documents with a score above that threshold."
                },
                {
                  "type": "code",
                  "code": "retriever = vectorstore.as_retriever(    search_type=\"similarity_score_threshold\", search_kwargs={\"score_threshold\": 0.5})"
                },
                {
                  "type": "code",
                  "code": "docs = retriever.invoke(\"what did the president say about ketanji brown jackson?\")"
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "Specifying top k‚Äã",
              "anchor": "specifying-top-k",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "We can also limit the number of documents k returned by the retriever."
                },
                {
                  "type": "code",
                  "code": "retriever = vectorstore.as_retriever(search_kwargs={\"k\": 1})"
                },
                {
                  "type": "code",
                  "code": "docs = retriever.invoke(\"what did the president say about ketanji brown jackson?\")len(docs)"
                },
                {
                  "type": "code",
                  "code": "1"
                },
                {
                  "type": "list",
                  "ordered": false,
                  "items": [
                    "Similarity score threshold retrieval",
                    "Specifying top k"
                  ]
                }
              ],
              "children": []
            }
          ]
        }
      ]
    }
  ]
}
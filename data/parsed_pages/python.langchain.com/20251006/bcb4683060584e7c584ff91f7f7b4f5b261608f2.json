{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/document_loader_csv/",
    "title": "How to load CSVs | ü¶úÔ∏èüîó LangChain",
    "fetched_at": "2025-10-06T21:55:19.555228"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to load CSVs | ü¶úÔ∏èüîó LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "A comma-separated values (CSV) file is a delimited text file that uses a comma to separate values. Each line of the file is a data record. Each record consists of one or more fields, separated by commas."
        },
        {
          "type": "paragraph",
          "text": "LangChain implements a CSV Loader that will load CSV files into a sequence of Document objects. Each row of the CSV file is translated to one document."
        },
        {
          "type": "code",
          "code": "from langchain_community.document_loaders.csv_loader import CSVLoaderfile_path = \"../integrations/document_loaders/example_data/mlb_teams_2012.csv\"loader = CSVLoader(file_path=file_path)data = loader.load()for record in data[:2]:    print(record)"
        },
        {
          "type": "code",
          "code": "page_content='Team: Nationals\\n\"Payroll (millions)\": 81.34\\n\"Wins\": 98' metadata={'source': '../../../docs/integrations/document_loaders/example_data/mlb_teams_2012.csv', 'row': 0}page_content='Team: Reds\\n\"Payroll (millions)\": 82.20\\n\"Wins\": 97' metadata={'source': '../../../docs/integrations/document_loaders/example_data/mlb_teams_2012.csv', 'row': 1}"
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Customizing the CSV parsing and loading‚Äã",
          "anchor": "customizing-the-csv-parsing-and-loading",
          "blocks": [
            {
              "type": "paragraph",
              "text": "CSVLoader will accept a csv_args kwarg that supports customization of arguments passed to Python's csv.DictReader. See the csv module documentation for more information of what csv args are supported."
            },
            {
              "type": "code",
              "code": "loader = CSVLoader(    file_path=file_path,    csv_args={        \"delimiter\": \",\",        \"quotechar\": '\"',        \"fieldnames\": [\"MLB Team\", \"Payroll in millions\", \"Wins\"],    },)data = loader.load()for record in data[:2]:    print(record)"
            },
            {
              "type": "code",
              "code": "page_content='MLB Team: Team\\nPayroll in millions: \"Payroll (millions)\"\\nWins: \"Wins\"' metadata={'source': '../../../docs/integrations/document_loaders/example_data/mlb_teams_2012.csv', 'row': 0}page_content='MLB Team: Nationals\\nPayroll in millions: 81.34\\nWins: 98' metadata={'source': '../../../docs/integrations/document_loaders/example_data/mlb_teams_2012.csv', 'row': 1}"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Specify a column to identify the document source‚Äã",
          "anchor": "specify-a-column-to-identify-the-document-source",
          "blocks": [
            {
              "type": "paragraph",
              "text": "The \"source\" key on Document metadata can be set using a column of the CSV. Use the source_column argument to specify a source for the document created from each row. Otherwise file_path will be used as the source for all documents created from the CSV file."
            },
            {
              "type": "paragraph",
              "text": "This is useful when using documents loaded from CSV files for chains that answer questions using sources."
            },
            {
              "type": "code",
              "code": "loader = CSVLoader(file_path=file_path, source_column=\"Team\")data = loader.load()for record in data[:2]:    print(record)"
            },
            {
              "type": "code",
              "code": "page_content='Team: Nationals\\n\"Payroll (millions)\": 81.34\\n\"Wins\": 98' metadata={'source': 'Nationals', 'row': 0}page_content='Team: Reds\\n\"Payroll (millions)\": 82.20\\n\"Wins\": 97' metadata={'source': 'Reds', 'row': 1}"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Load from a string‚Äã",
          "anchor": "load-from-a-string",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Python's tempfile can be used when working with CSV strings directly."
            },
            {
              "type": "code",
              "code": "import tempfilefrom io import StringIOstring_data = \"\"\"\"Team\", \"Payroll (millions)\", \"Wins\"\"Nationals\",     81.34, 98\"Reds\",          82.20, 97\"Yankees\",      197.96, 95\"Giants\",       117.62, 94\"\"\".strip()with tempfile.NamedTemporaryFile(delete=False, mode=\"w+\") as temp_file:    temp_file.write(string_data)    temp_file_path = temp_file.nameloader = CSVLoader(file_path=temp_file_path)data = loader.load()for record in data[:2]:    print(record)"
            },
            {
              "type": "code",
              "code": "page_content='Team: Nationals\\n\"Payroll (millions)\": 81.34\\n\"Wins\": 98' metadata={'source': 'Nationals', 'row': 0}page_content='Team: Reds\\n\"Payroll (millions)\": 82.20\\n\"Wins\": 97' metadata={'source': 'Reds', 'row': 1}"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Customizing the CSV parsing and loading",
                "Specify a column to identify the document source",
                "Load from a string"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
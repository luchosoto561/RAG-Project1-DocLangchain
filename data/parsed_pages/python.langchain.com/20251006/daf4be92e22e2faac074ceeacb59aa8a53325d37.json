{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/tools_human/",
    "title": "How to add a human-in-the-loop for tools | 🦜️🔗 LangChain",
    "fetched_at": "2025-10-06T21:56:44.995554"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to add a human-in-the-loop for tools | 🦜️🔗 LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "There are certain tools that we don't trust a model to execute on its own. One thing we can do in such situations is require human approval before the tool is invoked."
        },
        {
          "type": "paragraph",
          "text": "This how-to guide shows a simple way to add human-in-the-loop for code running in a jupyter notebook or in a terminal."
        },
        {
          "type": "paragraph",
          "text": "To build a production application, you will need to do more work to keep track of application state appropriately."
        },
        {
          "type": "paragraph",
          "text": "We recommend using langgraph for powering such a capability. For more details, please see this guide."
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Setup​",
          "anchor": "setup",
          "blocks": [
            {
              "type": "paragraph",
              "text": "We'll need to install the following packages:"
            },
            {
              "type": "code",
              "code": "%pip install --upgrade --quiet langchain"
            },
            {
              "type": "paragraph",
              "text": "And set these environment variables:"
            },
            {
              "type": "code",
              "code": "import getpassimport os# If you'd like to use LangSmith, uncomment the below:# os.environ[\"LANGSMITH_TRACING\"] = \"true\"# os.environ[\"LANGSMITH_API_KEY\"] = getpass.getpass()"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Chain​",
          "anchor": "chain",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Let's create a few simple (dummy) tools and a tool-calling chain:"
            },
            {
              "type": "code",
              "code": "pip install -qU \"langchain[google-genai]\""
            },
            {
              "type": "code",
              "code": "import getpassimport osif not os.environ.get(\"GOOGLE_API_KEY\"):  os.environ[\"GOOGLE_API_KEY\"] = getpass.getpass(\"Enter API key for Google Gemini: \")from langchain.chat_models import init_chat_modelllm = init_chat_model(\"gemini-2.5-flash\", model_provider=\"google_genai\")"
            },
            {
              "type": "code",
              "code": "from typing import Dict, Listfrom langchain_core.messages import AIMessagefrom langchain_core.runnables import Runnable, RunnablePassthroughfrom langchain_core.tools import tool@tooldef count_emails(last_n_days: int) -> int:    \"\"\"Dummy function to count number of e-mails. Returns 2 * last_n_days.\"\"\"    return last_n_days * 2@tooldef send_email(message: str, recipient: str) -> str:    \"\"\"Dummy function for sending an e-mail.\"\"\"    return f\"Successfully sent email to {recipient}.\"tools = [count_emails, send_email]llm_with_tools = llm.bind_tools(tools)def call_tools(msg: AIMessage) -> List[Dict]:    \"\"\"Simple sequential tool calling helper.\"\"\"    tool_map = {tool.name: tool for tool in tools}    tool_calls = msg.tool_calls.copy()    for tool_call in tool_calls:        tool_call[\"output\"] = tool_map[tool_call[\"name\"]].invoke(tool_call[\"args\"])    return tool_callschain = llm_with_tools | call_toolschain.invoke(\"how many emails did i get in the last 5 days?\")"
            },
            {
              "type": "code",
              "code": "[{'name': 'count_emails',  'args': {'last_n_days': 5},  'id': 'toolu_01XrE4AU9QLo4imbriDDkmXm',  'type': 'tool_call',  'output': 10}]"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Adding human approval​",
          "anchor": "adding-human-approval",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Let's add a step in the chain that will ask a person to approve or reject the tool call request."
            },
            {
              "type": "paragraph",
              "text": "On rejection, the step will raise an exception which will stop execution of the rest of the chain."
            },
            {
              "type": "code",
              "code": "import jsonclass NotApproved(Exception):    \"\"\"Custom exception.\"\"\"def human_approval(msg: AIMessage) -> AIMessage:    \"\"\"Responsible for passing through its input or raising an exception.    Args:        msg: output from the chat model    Returns:        msg: original output from the msg    \"\"\"    tool_strs = \"\\n\\n\".join(        json.dumps(tool_call, indent=2) for tool_call in msg.tool_calls    )    input_msg = (        f\"Do you approve of the following tool invocations\\n\\n{tool_strs}\\n\\n\"        \"Anything except 'Y'/'Yes' (case-insensitive) will be treated as a no.\\n >>>\"    )    resp = input(input_msg)    if resp.lower() not in (\"yes\", \"y\"):        raise NotApproved(f\"Tool invocations not approved:\\n\\n{tool_strs}\")    return msg"
            },
            {
              "type": "code",
              "code": "chain = llm_with_tools | human_approval | call_toolschain.invoke(\"how many emails did i get in the last 5 days?\")"
            },
            {
              "type": "code",
              "code": "Do you approve of the following tool invocations{  \"name\": \"count_emails\",  \"args\": {    \"last_n_days\": 5  },  \"id\": \"toolu_01WbD8XeMoQaRFtsZezfsHor\"}Anything except 'Y'/'Yes' (case-insensitive) will be treated as a no. >>> yes"
            },
            {
              "type": "code",
              "code": "[{'name': 'count_emails',  'args': {'last_n_days': 5},  'id': 'toolu_01WbD8XeMoQaRFtsZezfsHor',  'output': 10}]"
            },
            {
              "type": "code",
              "code": "try:    chain.invoke(\"Send sally@gmail.com an email saying 'What's up homie'\")except NotApproved as e:    print()    print(e)"
            },
            {
              "type": "code",
              "code": "Do you approve of the following tool invocations{  \"name\": \"send_email\",  \"args\": {    \"recipient\": \"sally@gmail.com\",    \"message\": \"What's up homie\"  },  \"id\": \"toolu_014XccHFzBiVcc9GV1harV9U\"}Anything except 'Y'/'Yes' (case-insensitive) will be treated as a no. >>> no``````outputTool invocations not approved:{  \"name\": \"send_email\",  \"args\": {    \"recipient\": \"sally@gmail.com\",    \"message\": \"What's up homie\"  },  \"id\": \"toolu_014XccHFzBiVcc9GV1harV9U\"}"
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Setup",
                "Chain",
                "Adding human approval"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
{
  "provenance": {
    "url_final": "https://python.langchain.com/docs/how_to/tools_chain/",
    "title": "How to use tools in a chain | 🦜️🔗 LangChain",
    "fetched_at": "2025-10-06T21:54:16.434276"
  },
  "sections": [
    {
      "level": 1,
      "heading_text": "How to use tools in a chain | 🦜️🔗 LangChain",
      "blocks": [
        {
          "type": "paragraph",
          "text": "In this guide, we will go over the basic ways to create Chains and Agents that call Tools. Tools can be just about anything — APIs, functions, databases, etc. Tools allow us to extend the capabilities of a model beyond just outputting text/messages. The key to using models with tools is correctly prompting a model and parsing its response so that it chooses the right tools and provides the right inputs for them."
        }
      ],
      "children": [
        {
          "level": 2,
          "heading_text": "Setup​",
          "anchor": "setup",
          "blocks": [
            {
              "type": "paragraph",
              "text": "We'll need to install the following packages for this guide:"
            },
            {
              "type": "code",
              "code": "%pip install --upgrade --quiet langchain"
            },
            {
              "type": "paragraph",
              "text": "If you'd like to trace your runs in LangSmith uncomment and set the following environment variables:"
            },
            {
              "type": "code",
              "code": "import getpassimport os# os.environ[\"LANGSMITH_TRACING\"] = \"true\"# os.environ[\"LANGSMITH_API_KEY\"] = getpass.getpass()"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Create a tool​",
          "anchor": "create-a-tool",
          "blocks": [
            {
              "type": "paragraph",
              "text": "First, we need to create a tool to call. For this example, we will create a custom tool from a function. For more information on creating custom tools, please see this guide."
            },
            {
              "type": "code",
              "code": "from langchain_core.tools import tool@tooldef multiply(first_int: int, second_int: int) -> int:    \"\"\"Multiply two integers together.\"\"\"    return first_int * second_int"
            },
            {
              "type": "code",
              "code": "print(multiply.name)print(multiply.description)print(multiply.args)"
            },
            {
              "type": "code",
              "code": "multiplyMultiply two integers together.{'first_int': {'title': 'First Int', 'type': 'integer'}, 'second_int': {'title': 'Second Int', 'type': 'integer'}}"
            },
            {
              "type": "code",
              "code": "multiply.invoke({\"first_int\": 4, \"second_int\": 5})"
            },
            {
              "type": "code",
              "code": "20"
            }
          ],
          "children": []
        },
        {
          "level": 2,
          "heading_text": "Chains​",
          "anchor": "chains",
          "blocks": [
            {
              "type": "paragraph",
              "text": "If we know that we only need to use a tool a fixed number of times, we can create a chain for doing so. Let's create a simple chain that just multiplies user-specified numbers."
            }
          ],
          "children": [
            {
              "level": 3,
              "heading_text": "Tool/function calling​",
              "anchor": "toolfunction-calling",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "One of the most reliable ways to use tools with LLMs is with tool calling APIs (also sometimes called function calling). This only works with models that explicitly support tool calling. You can see which models support tool calling here, and learn more about how to use tool calling in this guide."
                },
                {
                  "type": "paragraph",
                  "text": "First we'll define our model and tools. We'll start with just a single tool, multiply."
                },
                {
                  "type": "code",
                  "code": "pip install -qU \"langchain[google-genai]\""
                },
                {
                  "type": "code",
                  "code": "import getpassimport osif not os.environ.get(\"GOOGLE_API_KEY\"):  os.environ[\"GOOGLE_API_KEY\"] = getpass.getpass(\"Enter API key for Google Gemini: \")from langchain.chat_models import init_chat_modelllm = init_chat_model(\"gemini-2.5-flash\", model_provider=\"google_genai\")"
                },
                {
                  "type": "paragraph",
                  "text": "We'll use bind_tools to pass the definition of our tool in as part of each call to the model, so that the model can invoke the tool when appropriate:"
                },
                {
                  "type": "code",
                  "code": "llm_with_tools = llm.bind_tools([multiply])"
                },
                {
                  "type": "paragraph",
                  "text": "When the model invokes the tool, this will show up in the AIMessage.tool_calls attribute of the output:"
                },
                {
                  "type": "code",
                  "code": "msg = llm_with_tools.invoke(\"whats 5 times forty two\")msg.tool_calls"
                },
                {
                  "type": "code",
                  "code": "[{'name': 'multiply',  'args': {'first_int': 5, 'second_int': 42},  'id': 'call_8QIg4QVFVAEeC1orWAgB2036',  'type': 'tool_call'}]"
                },
                {
                  "type": "paragraph",
                  "text": "Check out the LangSmith trace here."
                }
              ],
              "children": []
            },
            {
              "level": 3,
              "heading_text": "Invoking the tool​",
              "anchor": "invoking-the-tool",
              "blocks": [
                {
                  "type": "paragraph",
                  "text": "Great! We're able to generate tool invocations. But what if we want to actually call the tool? To do so we'll need to pass the generated tool args to our tool. As a simple example we'll just extract the arguments of the first tool_call:"
                },
                {
                  "type": "code",
                  "code": "from operator import itemgetterchain = llm_with_tools | (lambda x: x.tool_calls[0][\"args\"]) | multiplychain.invoke(\"What's four times 23\")"
                },
                {
                  "type": "code",
                  "code": "92"
                },
                {
                  "type": "paragraph",
                  "text": "Check out the LangSmith trace here."
                }
              ],
              "children": []
            }
          ]
        },
        {
          "level": 2,
          "heading_text": "Agents​",
          "anchor": "agents",
          "blocks": [
            {
              "type": "paragraph",
              "text": "Chains are great when we know the specific sequence of tool usage needed for any user input. But for certain use cases, how many times we use tools depends on the input. In these cases, we want to let the model itself decide how many times to use tools and in what order. Agents let us do just this."
            },
            {
              "type": "paragraph",
              "text": "We'll demonstrate a simple example using a LangGraph agent. See this tutorial for more detail."
            },
            {
              "type": "code",
              "code": "!pip install -qU langgraph"
            },
            {
              "type": "code",
              "code": "from langgraph.prebuilt import create_react_agent"
            },
            {
              "type": "paragraph",
              "text": "Agents are also great because they make it easy to use multiple tools."
            },
            {
              "type": "code",
              "code": "@tooldef add(first_int: int, second_int: int) -> int:    \"Add two integers.\"    return first_int + second_int@tooldef exponentiate(base: int, exponent: int) -> int:    \"Exponentiate the base to the exponent power.\"    return base**exponenttools = [multiply, add, exponentiate]"
            },
            {
              "type": "code",
              "code": "# Construct the tool calling agentagent = create_react_agent(llm, tools)"
            },
            {
              "type": "paragraph",
              "text": "With an agent, we can ask questions that require arbitrarily-many uses of our tools:"
            },
            {
              "type": "code",
              "code": "# Use the agentquery = (    \"Take 3 to the fifth power and multiply that by the sum of twelve and \"    \"three, then square the whole result.\")input_message = {\"role\": \"user\", \"content\": query}for step in agent.stream({\"messages\": [input_message]}, stream_mode=\"values\"):    step[\"messages\"][-1].pretty_print()"
            },
            {
              "type": "code",
              "code": "================================\u001b[1m Human Message \u001b[0m=================================Take 3 to the fifth power and multiply that by the sum of twelve and three, then square the whole result.==================================\u001b[1m Ai Message \u001b[0m==================================Tool Calls:  exponentiate (call_EHGS8gnEVNCJQ9rVOk11KCQH) Call ID: call_EHGS8gnEVNCJQ9rVOk11KCQH  Args:    base: 3    exponent: 5  add (call_s2cxOrXEKqI6z7LWbMUG6s8c) Call ID: call_s2cxOrXEKqI6z7LWbMUG6s8c  Args:    first_int: 12    second_int: 3=================================\u001b[1m Tool Message \u001b[0m=================================Name: add15==================================\u001b[1m Ai Message \u001b[0m==================================Tool Calls:  multiply (call_25v5JEfDWuKNgmVoGBan0d7J) Call ID: call_25v5JEfDWuKNgmVoGBan0d7J  Args:    first_int: 243    second_int: 15=================================\u001b[1m Tool Message \u001b[0m=================================Name: multiply3645==================================\u001b[1m Ai Message \u001b[0m==================================Tool Calls:  exponentiate (call_x1yKEeBPrFYmCp2z5Kn8705r) Call ID: call_x1yKEeBPrFYmCp2z5Kn8705r  Args:    base: 3645    exponent: 2=================================\u001b[1m Tool Message \u001b[0m=================================Name: exponentiate13286025==================================\u001b[1m Ai Message \u001b[0m==================================The final result of taking 3 to the fifth power, multiplying it by the sum of twelve and three, and then squaring the whole result is **13,286,025**."
            },
            {
              "type": "paragraph",
              "text": "Check out the LangSmith trace here."
            },
            {
              "type": "list",
              "ordered": false,
              "items": [
                "Tool/function calling",
                "Invoking the tool"
              ]
            }
          ],
          "children": []
        }
      ]
    }
  ]
}